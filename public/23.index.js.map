{"version":3,"sources":["webpack:///./app/components/browse.js","webpack:///./app/components/common/map/map.js"],"names":["_react","__webpack_require__","l","g","n","o","_reactRouterDom","u","_reactBootstrap","_reactBootstrapTable","_reactRouterBootstrap","f","h","p","m","e","__esModule","default","Browse","Component","_this2","this","navigator","geolocation","getCurrentPosition","position","setState","currLat","coords","latitude","currLng","longitude","Request","get","config","getUrl","getRegion","withCredentials","end","err","res","error","areas","body","cell","row","_react2","createElement","Link","to","id","name","visibility","_reactFontawesome2","icon","key","value","Math","PI","lat1","lon1","lat2","lon2","dLat","toRad","dLon","a","sin","cos","atan2","sqrt","state","lat","lng","calcCrow","toFixed","b","order","x","y","spin","size","status","toString","markers","filter","map","title","label","charAt","url","length","_map2","defaultCenter","getDefaultCenter","defaultZoom","getDefaultZoom","_reactMetaTags2","getTitle","content","Breadcrumb","auth","isAdmin","OverlayTrigger","placement","overlay","Tooltip","style","float","LinkContainer","Button","bsStyle","bsSize","inverse","color","BootstrapTable","data","condensed","hover","columnFilter","TableHeaderColumn","dataField","isKey","hidden","dataSort","dataFormat","formatName","bind","width","type","placeholder","dataAlign","formatDistance","sortFunc","sortDistance","t","s","_reactRouter","_reactGoogleMaps","Map","props","_this","__proto__","Object","getPrototypeOf","call","pushUrl","Redirect","push","i","Marker","clickable","onClick","handleOnClick","polygons","Polygon","paths","triangleCoords","options","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","GettingStartedGoogleMap","withGoogleMap","GoogleMap","defaultMapTypeId","google","maps","MapTypeId","TERRAIN","_MarkerClusterer2","averageCenter","minimumClusterSize","enableRetinaIcons","imagePath","gridSize","height","containerElement","mapElement"],"mappings":"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","file":"23.index.js","sourcesContent":["import React, {Component} from 'react';\r\nimport MetaTags from 'react-meta-tags';\r\nimport { Link } from 'react-router-dom';\r\nimport Request from 'superagent';\r\nimport { OverlayTrigger, Tooltip, Button, Table, Breadcrumb } from 'react-bootstrap';\r\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport Map from './common/map/map';\r\nimport auth from '../utils/auth.js';\r\nimport config from '../utils/config.js';\r\nimport FontAwesomeIcon from '@fortawesome/react-fontawesome';\r\nimport { faSpinner, faLock, faUserSecret, faPlane, faPlusSquare } from '@fortawesome/fontawesome-free-solid';\r\n\r\nexport default class Browse extends Component {\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      this.setState({currLat: position.coords.latitude, currLng: position.coords.longitude});\r\n    });\r\n    Request.get(config.getUrl(\"areas/list?regionId=\" + config.getRegion())).withCredentials().end((err, res) => {\r\n      this.setState({\r\n        error: err? err : null,\r\n        areas: err? null : res.body\r\n      });\r\n    });\r\n  }\r\n\r\n  formatName(cell, row) {\r\n    return <span><Link to={`/area/${row.id}`}>{row.name}</Link> {row.visibility===1 && <FontAwesomeIcon icon=\"lock\" />}{row.visibility===2 && <FontAwesomeIcon icon=\"user-secret\" />}</span>;\r\n  }\r\n\r\n  toRad(value) {\r\n    return value * Math.PI / 180;\r\n  }\r\n\r\n  calcCrow(lat1, lon1, lat2, lon2) {\r\n    var R = 6371; // km\r\n    var dLat = this.toRad(lat2-lat1);\r\n    var dLon = this.toRad(lon2-lon1);\r\n    var lat1 = this.toRad(lat1);\r\n    var lat2 = this.toRad(lat2);\r\n\r\n    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    var d = R * c;\r\n    return d;\r\n  }\r\n\r\n  formatDistance(cell, row) {\r\n    if (this.state.currLat>0 && this.state.currLng>0 && row.lat>0 && row.lng>0) {\r\n      return this.calcCrow(this.state.currLat, this.state.currLng, row.lat, row.lng).toFixed(1) + \" km\";\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  sortDistance(a, b, order) {\r\n    const x = this.state.currLat>0 && this.state.currLng>0 && a.lat>0 && a.lng>0? this.calcCrow(this.state.currLat, this.state.currLng, a.lat, a.lng) : 0;\r\n    const y = this.state.currLat>0 && this.state.currLng>0 && b.lat>0 && b.lng>0? this.calcCrow(this.state.currLat, this.state.currLng, b.lat, b.lng) : 0;\r\n    if (order==='asc') {\r\n      if (x<y) return -1;\r\n      else if (x>y) return 1;\r\n      return 0;\r\n    } else {\r\n      if (x<y) return 1;\r\n      else if (x>y) return -1;\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.state || !this.state.areas) {\r\n      return <center><FontAwesomeIcon icon=\"spinner\" spin size=\"3x\" /></center>;\r\n    }\r\n    if (this.state.error) {\r\n      return <span><h3>{this.state.error.status}</h3>{this.state.error.toString()}</span>;\r\n    }\r\n    const markers = this.state.areas.filter(a => a.lat!=0 && a.lng!=0).map(a => {\r\n      return {\r\n          lat: a.lat,\r\n          lng: a.lng,\r\n          title: a.name,\r\n          label: a.name.charAt(0),\r\n          url: '/area/' + a.id\r\n        }\r\n    });\r\n    const map = markers.length>0? <Map markers={markers} defaultCenter={config.getDefaultCenter()} defaultZoom={config.getDefaultZoom()}/> : null;\r\n    return (\r\n      <span>\r\n        <MetaTags>\r\n          <title>{config.getTitle(\"Browse\")}</title>\r\n          <meta name=\"description\" content={\"Browse areas\"} />\r\n        </MetaTags>\r\n        <Breadcrumb>\r\n          {auth.isAdmin()?\r\n            <OverlayTrigger placement=\"top\" overlay={<Tooltip id={-1}>Add area</Tooltip>}>\r\n              <div style={{float: 'right'}}><LinkContainer to={`/area/edit/-1`}><Button bsStyle=\"primary\" bsSize=\"xsmall\"><FontAwesomeIcon icon=\"plus-square\" inverse=\"true\" /></Button></LinkContainer></div>\r\n            </OverlayTrigger>:\r\n            null\r\n          }\r\n          <Link to={`/`}>Home</Link> / <font color='#777'>Browse</font>\r\n        </Breadcrumb>\r\n        {map}\r\n        <BootstrapTable\r\n          data={this.state.areas}\r\n          condensed={true}\r\n          hover={true}\r\n          columnFilter={false}>\r\n          <TableHeaderColumn dataField=\"id\" isKey={true} hidden={true}>id</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"name\" dataSort={true} dataFormat={this.formatName.bind(this)} width=\"150\" filter={{type: \"TextFilter\", placeholder: \"Filter\"}}>Name</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"numSectors\" dataSort={true} dataAlign=\"center\" width=\"50\">#sectors</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"numProblems\" dataSort={true} dataAlign=\"center\" width=\"50\">#problems</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"distance\" dataSort={true} dataFormat={this.formatDistance.bind(this)} sortFunc={this.sortDistance.bind(this)} dataAlign=\"center\" width=\"60\"><FontAwesomeIcon icon=\"plane\" /></TableHeaderColumn>\r\n        </BootstrapTable>\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport {withGoogleMap, GoogleMap, Marker, Polygon} from \"react-google-maps\";\r\nimport {default as MarkerClusterer} from 'react-google-maps/lib/components/addons/MarkerClusterer';\r\n\r\nexport default class Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      this.setState({currLat: position.coords.latitude, currLng: position.coords.longitude});\r\n    });\r\n  }\r\n\r\n  handleOnClick(pushUrl) {\r\n    this.setState({pushUrl: pushUrl});\r\n  }\r\n\r\n  render() {\r\n    if (this.state && this.state.pushUrl) {\r\n      return (<Redirect to={this.state.pushUrl} push />);\r\n    }\r\n\r\n    var markers = null;\r\n    if (this.props.markers) {\r\n      markers = this.props.markers.map((m, i) => {\r\n        return (\r\n          <Marker\r\n            icon={m.icon}\r\n            key={i}\r\n            position={{lat: m.lat, lng: m.lng}}\r\n            label={m.label}\r\n            title={m.title}\r\n            clickable={true}\r\n            onClick={this.handleOnClick.bind(this, m.url)}/>\r\n        );\r\n      });\r\n    }\r\n    if (this.state && this.state.currLat && this.state.currLng && this.state.currLat>0 && this.state.currLng>0) {\r\n      markers.push(<Marker\r\n                    key={-1}\r\n                    icon=\"https://maps.gstatic.com/mapfiles/markers2/measle_blue.png\"\r\n                    position={{lat: this.state.currLat, lng: this.state.currLng}}/>)\r\n    }\r\n    var polygons = null;\r\n    if (this.props.polygons) {\r\n      polygons = this.props.polygons.map((p, i) => {\r\n        return (\r\n          <Polygon\r\n            key={i}\r\n            paths={p.triangleCoords}\r\n            options={{strokeColor: '#FF3300', strokeOpacity: '0.5', strokeWeight: '2', fillColor: '#FF3300', fillOpacity: '0.15'}}\r\n            onClick={this.handleOnClick.bind(this, p.url)}/>\r\n        );\r\n      });\r\n    }\r\n    const GettingStartedGoogleMap = withGoogleMap(props => (\r\n      <GoogleMap\r\n        defaultZoom={this.props.defaultZoom}\r\n        defaultCenter={this.props.defaultCenter}\r\n        defaultMapTypeId={google.maps.MapTypeId.TERRAIN}\r\n      >\r\n        <MarkerClusterer\r\n          averageCenter={ false }\r\n          minimumClusterSize={ 60 }\r\n          enableRetinaIcons={ false }\r\n          imagePath={ \"https://raw.githubusercontent.com/googlemaps/js-marker-clusterer/gh-pages/images/m\" }\r\n          gridSize={ 60 }>\r\n          {markers}\r\n          {polygons}\r\n        </MarkerClusterer>\r\n      </GoogleMap>\r\n    ));\r\n\r\n    return (\r\n      <section style={{height: '600px'}}>\r\n        <GettingStartedGoogleMap\r\n          containerElement={<div style={{ height: `100%` }} />}\r\n          mapElement={<div style={{ height: `100%` }} />}\r\n        />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}