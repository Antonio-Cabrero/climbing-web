{"version":3,"sources":["webpack:///./app/components/browse.js","webpack:///./app/components/common/map/map.js"],"names":["_react","__webpack_require__","l","m","n","_reactRouterDom","i","_reactBootstrap","_reactBootstrapTable","_reactRouterBootstrap","d","f","h","p","e","__esModule","default","Browse","_this2","this","navigator","geolocation","getCurrentPosition","position","setState","currLat","coords","latitude","currLng","longitude","_superagent2","get","_config2","getUrl","getRegion","withCredentials","end","err","res","error","areas","body","document","title","getTitle","key","value","cell","row","_react2","createElement","Link","to","id","name","visibility","_reactFontawesome2","icon","Math","PI","lat1","lon1","lat2","lon2","dLat","toRad","dLon","a","sin","cos","atan2","sqrt","state","lat","lng","calcCrow","toFixed","b","order","x","y","spin","size","status","toString","markers","filter","map","label","charAt","url","length","_map2","defaultCenter","getDefaultCenter","defaultZoom","getDefaultZoom","Breadcrumb","_auth2","isAdmin","OverlayTrigger","placement","overlay","Tooltip","style","float","LinkContainer","Button","bsStyle","bsSize","inverse","color","BootstrapTable","data","condensed","hover","columnFilter","TableHeaderColumn","dataField","isKey","hidden","dataSort","dataFormat","formatName","bind","width","type","placeholder","dataAlign","formatDistance","sortFunc","sortDistance","t","s","_reactRouter","_reactGoogleMaps","u","Map","props","_this","__proto__","Object","getPrototypeOf","call","pushUrl","Redirect","push","Marker","clickable","onClick","handleOnClick","polygons","Polygon","paths","triangleCoords","options","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","GettingStartedGoogleMap","withGoogleMap","GoogleMap","defaultMapTypeId","google","maps","MapTypeId","TERRAIN","_MarkerClusterer2","averageCenter","minimumClusterSize","enableRetinaIcons","imagePath","gridSize","height","containerElement","mapElement"],"mappings":"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","file":"21.index.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Request from 'superagent';\r\nimport { OverlayTrigger, Tooltip, Button, Table, Breadcrumb } from 'react-bootstrap';\r\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport Map from './common/map/map';\r\nimport auth from '../utils/auth.js';\r\nimport config from '../utils/config.js';\r\nimport FontAwesomeIcon from '@fortawesome/react-fontawesome';\r\nimport { faSpinner, faLock, faUserSecret, faPlane, faPlusSquare } from '@fortawesome/fontawesome-free-solid';\r\n\r\nexport default class Browse extends Component {\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      this.setState({currLat: position.coords.latitude, currLng: position.coords.longitude});\r\n    });\r\n    Request.get(config.getUrl(\"areas/list?regionId=\" + config.getRegion())).withCredentials().end((err, res) => {\r\n      this.setState({\r\n        error: err? err : null,\r\n        areas: err? null : res.body\r\n      });\r\n      document.title=config.getTitle() + \" | browse\";\r\n    });\r\n  }\r\n\r\n  formatName(cell, row) {\r\n    return <span><Link to={`/area/${row.id}`}>{row.name}</Link> {row.visibility===1 && <FontAwesomeIcon icon=\"lock\" />}{row.visibility===2 && <FontAwesomeIcon icon=\"user-secret\" />}</span>;\r\n  }\r\n\r\n  toRad(value) {\r\n    return value * Math.PI / 180;\r\n  }\r\n\r\n  calcCrow(lat1, lon1, lat2, lon2) {\r\n    var R = 6371; // km\r\n    var dLat = this.toRad(lat2-lat1);\r\n    var dLon = this.toRad(lon2-lon1);\r\n    var lat1 = this.toRad(lat1);\r\n    var lat2 = this.toRad(lat2);\r\n\r\n    var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    var d = R * c;\r\n    return d;\r\n  }\r\n\r\n  formatDistance(cell, row) {\r\n    if (this.state.currLat>0 && this.state.currLng>0 && row.lat>0 && row.lng>0) {\r\n      return this.calcCrow(this.state.currLat, this.state.currLng, row.lat, row.lng).toFixed(1) + \" km\";\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  sortDistance(a, b, order) {\r\n    const x = this.state.currLat>0 && this.state.currLng>0 && a.lat>0 && a.lng>0? this.calcCrow(this.state.currLat, this.state.currLng, a.lat, a.lng) : 0;\r\n    const y = this.state.currLat>0 && this.state.currLng>0 && b.lat>0 && b.lng>0? this.calcCrow(this.state.currLat, this.state.currLng, b.lat, b.lng) : 0;\r\n    if (order==='asc') {\r\n      if (x<y) return -1;\r\n      else if (x>y) return 1;\r\n      return 0;\r\n    } else {\r\n      if (x<y) return 1;\r\n      else if (x>y) return -1;\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.state || !this.state.areas) {\r\n      return <center><FontAwesomeIcon icon=\"spinner\" spin size=\"3x\" /></center>;\r\n    }\r\n    if (this.state.error) {\r\n      return <span><h3>{this.state.error.status}</h3>{this.state.error.toString()}</span>;\r\n    }\r\n    const markers = this.state.areas.filter(a => a.lat!=0 && a.lng!=0).map(a => {\r\n      return {\r\n          lat: a.lat,\r\n          lng: a.lng,\r\n          title: a.name,\r\n          label: a.name.charAt(0),\r\n          url: '/area/' + a.id\r\n        }\r\n    });\r\n    const map = markers.length>0? <Map markers={markers} defaultCenter={config.getDefaultCenter()} defaultZoom={config.getDefaultZoom()}/> : null;\r\n    return (\r\n      <span>\r\n        <Breadcrumb>\r\n          {auth.isAdmin()?\r\n            <OverlayTrigger placement=\"top\" overlay={<Tooltip id={-1}>Add area</Tooltip>}>\r\n              <div style={{float: 'right'}}><LinkContainer to={`/area/edit/-1`}><Button bsStyle=\"primary\" bsSize=\"xsmall\"><FontAwesomeIcon icon=\"plus-square\" inverse /></Button></LinkContainer></div>\r\n            </OverlayTrigger>:\r\n            null\r\n          }\r\n          <Link to={`/`}>Home</Link> / <font color='#777'>Browse</font>\r\n        </Breadcrumb>\r\n        {map}\r\n        <BootstrapTable\r\n          data={this.state.areas}\r\n          condensed={true}\r\n          hover={true}\r\n          columnFilter={false}>\r\n          <TableHeaderColumn dataField=\"id\" isKey={true} hidden={true}>id</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"name\" dataSort={true} dataFormat={this.formatName.bind(this)} width=\"150\" filter={{type: \"TextFilter\", placeholder: \"Filter\"}}>Name</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"numSectors\" dataSort={true} dataAlign=\"center\" width=\"50\">#sectors</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"numProblems\" dataSort={true} dataAlign=\"center\" width=\"50\">#problems</TableHeaderColumn>\r\n          <TableHeaderColumn dataField=\"distance\" dataSort={true} dataFormat={this.formatDistance.bind(this)} sortFunc={this.sortDistance.bind(this)} dataAlign=\"center\" width=\"60\"><FontAwesomeIcon icon=\"plane\" /></TableHeaderColumn>\r\n        </BootstrapTable>\r\n      </span>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport {withGoogleMap, GoogleMap, Marker, Polygon} from \"react-google-maps\";\r\nimport {default as MarkerClusterer} from 'react-google-maps/lib/components/addons/MarkerClusterer';\r\n\r\nexport default class Map extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      this.setState({currLat: position.coords.latitude, currLng: position.coords.longitude});\r\n    });\r\n  }\r\n\r\n  handleOnClick(pushUrl) {\r\n    this.setState({pushUrl: pushUrl});\r\n  }\r\n\r\n  render() {\r\n    if (this.state && this.state.pushUrl) {\r\n      return (<Redirect to={this.state.pushUrl} push />);\r\n    }\r\n\r\n    var markers = null;\r\n    if (this.props.markers) {\r\n      markers = this.props.markers.map((m, i) => {\r\n        return (\r\n          <Marker\r\n            icon={m.icon}\r\n            key={i}\r\n            position={{lat: m.lat, lng: m.lng}}\r\n            label={m.label}\r\n            title={m.title}\r\n            clickable={true}\r\n            onClick={this.handleOnClick.bind(this, m.url)}/>\r\n        );\r\n      });\r\n    }\r\n    if (this.state && this.state.currLat && this.state.currLng && this.state.currLat>0 && this.state.currLng>0) {\r\n      markers.push(<Marker\r\n                    key={-1}\r\n                    icon=\"https://maps.gstatic.com/mapfiles/markers2/measle_blue.png\"\r\n                    position={{lat: this.state.currLat, lng: this.state.currLng}}/>)\r\n    }\r\n    var polygons = null;\r\n    if (this.props.polygons) {\r\n      polygons = this.props.polygons.map((p, i) => {\r\n        return (\r\n          <Polygon\r\n            key={i}\r\n            paths={p.triangleCoords}\r\n            options={{strokeColor: '#FF3300', strokeOpacity: '0.5', strokeWeight: '2', fillColor: '#FF3300', fillOpacity: '0.15'}}\r\n            onClick={this.handleOnClick.bind(this, p.url)}/>\r\n        );\r\n      });\r\n    }\r\n    const GettingStartedGoogleMap = withGoogleMap(props => (\r\n      <GoogleMap\r\n        defaultZoom={this.props.defaultZoom}\r\n        defaultCenter={this.props.defaultCenter}\r\n        defaultMapTypeId={google.maps.MapTypeId.TERRAIN}\r\n      >\r\n        <MarkerClusterer\r\n          averageCenter={ false }\r\n          minimumClusterSize={ 60 }\r\n          enableRetinaIcons={ false }\r\n          imagePath={ \"https://raw.githubusercontent.com/googlemaps/js-marker-clusterer/gh-pages/images/m\" }\r\n          gridSize={ 60 }>\r\n          {markers}\r\n          {polygons}\r\n        </MarkerClusterer>\r\n      </GoogleMap>\r\n    ));\r\n\r\n    return (\r\n      <section style={{height: '600px'}}>\r\n        <GettingStartedGoogleMap\r\n          containerElement={<div style={{ height: `100%` }} />}\r\n          mapElement={<div style={{ height: `100%` }} />}\r\n        />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}