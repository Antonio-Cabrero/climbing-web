{"version":3,"sources":["webpack:///./node_modules/react-google-maps/lib/components/addons/MarkerClusterer.js","webpack:///./node_modules/marker-clusterer-plus/src/markerclusterer.js"],"names":["Object","defineProperty","exports","value","MarkerClusterer","_MarkerClusterer$chil","_defineProperty3","_interopRequireDefault","__webpack_require__","_getPrototypeOf2","_classCallCheck3","_createClass3","_possibleConstructorReturn3","_inherits3","_react2","_propTypes2","_markerClustererPlus2","_MapChildHelper","_constants","obj","__esModule","default","_React$PureComponent","props","context","this","_this","__proto__","call","markerClusterer","construct","propTypes","updaterMap","setMap","MAP","state","MARKER_CLUSTERER","key","_ref","ANCHOR","componentDidMount","eventMap","prevProps","componentDidUpdate","repaint","componentWillUnmount","children","createElement","PureComponent","defaultAverageCenter","bool","defaultBatchSizeIE","number","defaultBatchSize","defaultCalculator","func","defaultClusterClass","string","defaultEnableRetinaIcons","defaultGridSize","defaultIgnoreHidden","defaultImageExtension","defaultImagePath","defaultImageSizes","array","defaultMaxZoom","defaultMinimumClusterSize","defaultStyles","defaultTitle","defaultZoomOnClick","averageCenter","batchSizeIE","batchSize","calculator","clusterClass","enableRetinaIcons","gridSize","ignoreHidden","imageExtension","imagePath","imageSizes","maxZoom","minimumClusterSize","styles","title","zoomOnClick","onClick","onClusteringBegin","onClusteringEnd","onMouseOut","onMouseOver","contextTypes","object","childContextTypes","instance","_averageCenter","setAverageCenter","_batchSizeIE","setBatchSizeIE","_batchSize","setBatchSize","_calculator","setCalculator","_clusterClass","setClusterClass","_enableRetinaIcons","setEnableRetinaIcons","_gridSize","setGridSize","_ignoreHidden","setIgnoreHidden","_imageExtension","setImageExtension","_imagePath","setImagePath","_imageSizes","setImageSizes","_maxZoom","setMaxZoom","_minimumClusterSize","setMinimumClusterSize","_styles","setStyles","_title","setTitle","_zoomOnClick","setZoomOnClick","ClusterIcon","cluster","getMarkerClusterer","extend","google","maps","OverlayView","cluster_","className_","getClusterClass","styles_","center_","div_","sums_","visible_","getMap","Cluster","mc","markerClusterer_","map_","gridSize_","getGridSize","minClusterSize_","getMinimumClusterSize","averageCenter_","getAverageCenter","markers_","bounds_","clusterIcon_","getStyles","map","opt_markers","opt_options","clusters_","listeners_","activeMap_","ready_","maxZoom_","title_","zoomOnClick_","ignoreHidden_","enableRetinaIcons_","imagePath_","IMAGE_PATH","imageExtension_","IMAGE_EXTENSION","imageSizes_","IMAGE_SIZES","calculator_","CALCULATOR","batchSize_","BATCH_SIZE","batchSizeIE_","BATCH_SIZE_IE","clusterClass_","navigator","userAgent","toLowerCase","indexOf","setupStyles_","addMarkers","prototype","onAdd","cMouseDownInCluster","cDraggingMapByCluster","cClusterIcon","document","className","show","getPanes","overlayMouseTarget","appendChild","boundsChangedListener_","event","addListener","addDomListener","e","theBounds","mz","trigger","getZoomOnClick","getMaxZoom","getBounds","fitBounds","setTimeout","getZoom","setZoom","cancelBubble","stopPropagation","onRemove","parentNode","hide","removeListener","clearInstanceListeners","removeChild","draw","pos","getPosFromLatLng_","style","top","y","left","x","display","img","bp","backgroundPosition_","split","spriteH","parseInt","replace","spriteV","cssText","createCss","url_","width_","height_","innerHTML","anchorText_","textColor_","textSize_","fontFamily_","fontWeight_","fontStyle_","textDecoration_","text","getTitle","useStyle","sums","index","Math","max","min","length","url","height","width","anchorText","anchorIcon_","anchorIcon","textColor","textSize","textDecoration","fontWeight","fontStyle","fontFamily","backgroundPosition","setCenter","center","push","join","latlng","getProjection","fromLatLngToDivPixel","getSize","getMarkers","getCenter","i","bounds","LatLngBounds","markers","getPosition","remove","addMarker","marker","mCount","isMarkerAlreadyAdded_","l","lat","lng","LatLng","calculateBounds_","isAdded","updateIcon_","isMarkerInClusterBounds","contains","getExtendedBounds","numStyles","getCalculator","cMarkerClusterer","resetViewport_","get","redraw_","size","fitMapToMarkers","getIgnoreHidden","getEnableRetinaIcons","getImageExtension","getImagePath","getImageSizes","getBatchSizeIE","getTotalMarkers","getClusters","getTotalClusters","opt_nodraw","pushMarkerTo_","hasOwnProperty","getDraggable","removeMarker","removed","removeMarker_","removeMarkers","r","splice","clearMarkers","oldClusters","slice","projection","tr","getNorthEast","bl","getSouthWest","trPix","blPix","ne","fromDivPixelToLatLng","sw","createClusters_","opt_hide","distanceBetweenPoints_","p1","p2","dLat","PI","dLon","a","sin","cos","atan2","sqrt","isMarkerInBounds_","addToClosestCluster_","d","distance","clusterToAddTo","iFirst","mapBounds","timerRefStatic","clearTimeout","iLast","getVisible","obj1","obj2","property","apply","count","toString","dv","module"],"mappings":"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","file":"1.index.js","sourcesContent":["\"use strict\"\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true,\n})\nexports.MarkerClusterer = undefined\n\nvar _defineProperty2 = require(\"babel-runtime/helpers/defineProperty\")\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2)\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\")\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf)\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\")\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2)\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\")\n\nvar _createClass3 = _interopRequireDefault(_createClass2)\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\")\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(\n  _possibleConstructorReturn2\n)\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\")\n\nvar _inherits3 = _interopRequireDefault(_inherits2)\n\nvar _MarkerClusterer$chil\n\nvar _react = require(\"react\")\n\nvar _react2 = _interopRequireDefault(_react)\n\nvar _propTypes = require(\"prop-types\")\n\nvar _propTypes2 = _interopRequireDefault(_propTypes)\n\nvar _markerClustererPlus = require(\"marker-clusterer-plus\")\n\nvar _markerClustererPlus2 = _interopRequireDefault(_markerClustererPlus)\n\nvar _MapChildHelper = require(\"../../utils/MapChildHelper\")\n\nvar _constants = require(\"../../constants\")\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : { default: obj }\n}\n\n/**\n * A wrapper around `MarkerClusterer`\n *\n * @see https://github.com/mahnunchik/markerclustererplus/blob/master/docs/reference.html\n */\nvar MarkerClusterer = (exports.MarkerClusterer = (function(\n  _React$PureComponent\n) {\n  ;(0, _inherits3.default)(MarkerClusterer, _React$PureComponent)\n\n  /*\n   * @see https://github.com/mahnunchik/markerclustererplus/blob/master/docs/reference.html\n   */\n  function MarkerClusterer(props, context) {\n    ;(0, _classCallCheck3.default)(this, MarkerClusterer)\n\n    var _this = (0, _possibleConstructorReturn3.default)(\n      this,\n      (\n        MarkerClusterer.__proto__ ||\n        (0, _getPrototypeOf2.default)(MarkerClusterer)\n      ).call(this, props, context)\n    )\n\n    var markerClusterer = new _markerClustererPlus2.default()\n    ;(0, _MapChildHelper.construct)(\n      MarkerClusterer.propTypes,\n      updaterMap,\n      _this.props,\n      markerClusterer\n    )\n    markerClusterer.setMap(_this.context[_constants.MAP])\n    _this.state = (0, _defineProperty3.default)(\n      {},\n      _constants.MARKER_CLUSTERER,\n      markerClusterer\n    )\n    return _this\n  }\n\n  ;(0, _createClass3.default)(MarkerClusterer, [\n    {\n      key: \"getChildContext\",\n      value: function getChildContext() {\n        var _ref\n\n        var markerClusterer = this.state[_constants.MARKER_CLUSTERER]\n        return (\n          (_ref = {}),\n          (0, _defineProperty3.default)(\n            _ref,\n            _constants.ANCHOR,\n            markerClusterer\n          ),\n          (0, _defineProperty3.default)(\n            _ref,\n            _constants.MARKER_CLUSTERER,\n            markerClusterer\n          ),\n          _ref\n        )\n      },\n    },\n    {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        ;(0, _MapChildHelper.componentDidMount)(\n          this,\n          this.state[_constants.MARKER_CLUSTERER],\n          eventMap\n        )\n      },\n    },\n    {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        ;(0, _MapChildHelper.componentDidUpdate)(\n          this,\n          this.state[_constants.MARKER_CLUSTERER],\n          eventMap,\n          updaterMap,\n          prevProps\n        )\n        this.state[_constants.MARKER_CLUSTERER].repaint()\n      },\n    },\n    {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        ;(0, _MapChildHelper.componentWillUnmount)(this)\n        var markerClusterer = this.state[_constants.MARKER_CLUSTERER]\n        if (markerClusterer) {\n          markerClusterer.setMap(null)\n        }\n      },\n    },\n    {\n      key: \"render\",\n      value: function render() {\n        var children = this.props.children\n\n        return _react2.default.createElement(\"div\", null, children)\n      },\n    },\n  ])\n  return MarkerClusterer\n})(_react2.default.PureComponent))\n\nMarkerClusterer.propTypes = {\n  /**\n   * @type boolean\n   */\n  defaultAverageCenter: _propTypes2.default.bool,\n\n  /**\n   * @type number\n   */\n  defaultBatchSizeIE: _propTypes2.default.number,\n\n  /**\n   * @type number\n   */\n  defaultBatchSize: _propTypes2.default.number,\n\n  /**\n   * @type function\n   */\n  defaultCalculator: _propTypes2.default.func,\n\n  /**\n   * @type string\n   */\n  defaultClusterClass: _propTypes2.default.string,\n\n  /**\n   * @type boolean\n   */\n  defaultEnableRetinaIcons: _propTypes2.default.bool,\n\n  /**\n   * @type number\n   */\n  defaultGridSize: _propTypes2.default.number,\n\n  /**\n   * @type boolean\n   */\n  defaultIgnoreHidden: _propTypes2.default.bool,\n\n  /**\n   * @type string\n   */\n  defaultImageExtension: _propTypes2.default.string,\n\n  /**\n   * @type string\n   */\n  defaultImagePath: _propTypes2.default.string,\n\n  /**\n   * @type Array\n   */\n  defaultImageSizes: _propTypes2.default.array,\n\n  /**\n   * @type number\n   */\n  defaultMaxZoom: _propTypes2.default.number,\n\n  /**\n   * @type number\n   */\n  defaultMinimumClusterSize: _propTypes2.default.number,\n\n  /**\n   * @type Array\n   */\n  defaultStyles: _propTypes2.default.array,\n\n  /**\n   * @type string\n   */\n  defaultTitle: _propTypes2.default.string,\n\n  /**\n   * @type boolean\n   */\n  defaultZoomOnClick: _propTypes2.default.bool,\n\n  /**\n   * @type boolean\n   */\n  averageCenter: _propTypes2.default.bool,\n\n  /**\n   * @type number\n   */\n  batchSizeIE: _propTypes2.default.number,\n\n  /**\n   * @type number\n   */\n  batchSize: _propTypes2.default.number,\n\n  /**\n   * @type function\n   */\n  calculator: _propTypes2.default.func,\n\n  /**\n   * @type string\n   */\n  clusterClass: _propTypes2.default.string,\n\n  /**\n   * @type boolean\n   */\n  enableRetinaIcons: _propTypes2.default.bool,\n\n  /**\n   * @type number\n   */\n  gridSize: _propTypes2.default.number,\n\n  /**\n   * @type boolean\n   */\n  ignoreHidden: _propTypes2.default.bool,\n\n  /**\n   * @type string\n   */\n  imageExtension: _propTypes2.default.string,\n\n  /**\n   * @type string\n   */\n  imagePath: _propTypes2.default.string,\n\n  /**\n   * @type Array\n   */\n  imageSizes: _propTypes2.default.array,\n\n  /**\n   * @type number\n   */\n  maxZoom: _propTypes2.default.number,\n\n  /**\n   * @type number\n   */\n  minimumClusterSize: _propTypes2.default.number,\n\n  /**\n   * @type Array\n   */\n  styles: _propTypes2.default.array,\n\n  /**\n   * @type string\n   */\n  title: _propTypes2.default.string,\n\n  /**\n   * @type boolean\n   */\n  zoomOnClick: _propTypes2.default.bool,\n\n  /**\n   * function\n   */\n  onClick: _propTypes2.default.func,\n\n  /**\n   * function\n   */\n  onClusteringBegin: _propTypes2.default.func,\n\n  /**\n   * function\n   */\n  onClusteringEnd: _propTypes2.default.func,\n\n  /**\n   * function\n   */\n  onMouseOut: _propTypes2.default.func,\n\n  /**\n   * function\n   */\n  onMouseOver: _propTypes2.default.func,\n}\nMarkerClusterer.contextTypes = (0, _defineProperty3.default)(\n  {},\n  _constants.MAP,\n  _propTypes2.default.object\n)\nMarkerClusterer.childContextTypes = ((_MarkerClusterer$chil = {}),\n(0, _defineProperty3.default)(\n  _MarkerClusterer$chil,\n  _constants.ANCHOR,\n  _propTypes2.default.object\n),\n(0, _defineProperty3.default)(\n  _MarkerClusterer$chil,\n  _constants.MARKER_CLUSTERER,\n  _propTypes2.default.object\n),\n_MarkerClusterer$chil)\nexports.default = MarkerClusterer\n\nvar eventMap = {\n  onClick: \"click\",\n  onClusteringBegin: \"clusteringbegin\",\n  onClusteringEnd: \"clusteringend\",\n  onMouseOut: \"mouseout\",\n  onMouseOver: \"mouseover\",\n}\n\nvar updaterMap = {\n  averageCenter: function averageCenter(instance, _averageCenter) {\n    instance.setAverageCenter(_averageCenter)\n  },\n  batchSizeIE: function batchSizeIE(instance, _batchSizeIE) {\n    instance.setBatchSizeIE(_batchSizeIE)\n  },\n  batchSize: function batchSize(instance, _batchSize) {\n    instance.setBatchSize(_batchSize)\n  },\n  calculator: function calculator(instance, _calculator) {\n    instance.setCalculator(_calculator)\n  },\n  clusterClass: function clusterClass(instance, _clusterClass) {\n    instance.setClusterClass(_clusterClass)\n  },\n  enableRetinaIcons: function enableRetinaIcons(instance, _enableRetinaIcons) {\n    instance.setEnableRetinaIcons(_enableRetinaIcons)\n  },\n  gridSize: function gridSize(instance, _gridSize) {\n    instance.setGridSize(_gridSize)\n  },\n  ignoreHidden: function ignoreHidden(instance, _ignoreHidden) {\n    instance.setIgnoreHidden(_ignoreHidden)\n  },\n  imageExtension: function imageExtension(instance, _imageExtension) {\n    instance.setImageExtension(_imageExtension)\n  },\n  imagePath: function imagePath(instance, _imagePath) {\n    instance.setImagePath(_imagePath)\n  },\n  imageSizes: function imageSizes(instance, _imageSizes) {\n    instance.setImageSizes(_imageSizes)\n  },\n  maxZoom: function maxZoom(instance, _maxZoom) {\n    instance.setMaxZoom(_maxZoom)\n  },\n  minimumClusterSize: function minimumClusterSize(\n    instance,\n    _minimumClusterSize\n  ) {\n    instance.setMinimumClusterSize(_minimumClusterSize)\n  },\n  styles: function styles(instance, _styles) {\n    instance.setStyles(_styles)\n  },\n  title: function title(instance, _title) {\n    instance.setTitle(_title)\n  },\n  zoomOnClick: function zoomOnClick(instance, _zoomOnClick) {\n    instance.setZoomOnClick(_zoomOnClick)\n  },\n}\n","/**\n * @name MarkerClustererPlus for Google Maps V3\n * @version 2.1.2 [May 28, 2014]\n * @author Gary Little\n * @fileoverview\n * The library creates and manages per-zoom-level clusters for large amounts of markers.\n * <p>\n * This is an enhanced V3 implementation of the\n * <a href=\"http://gmaps-utility-library-dev.googlecode.com/svn/tags/markerclusterer/\"\n * >V2 MarkerClusterer</a> by Xiaoxi Wu. It is based on the\n * <a href=\"http://google-maps-utility-library-v3.googlecode.com/svn/tags/markerclusterer/\"\n * >V3 MarkerClusterer</a> port by Luke Mahe. MarkerClustererPlus was created by Gary Little.\n * <p>\n * v2.0 release: MarkerClustererPlus v2.0 is backward compatible with MarkerClusterer v1.0. It\n *  adds support for the <code>ignoreHidden</code>, <code>title</code>, <code>batchSizeIE</code>,\n *  and <code>calculator</code> properties as well as support for four more events. It also allows\n *  greater control over the styling of the text that appears on the cluster marker. The\n *  documentation has been significantly improved and the overall code has been simplified and\n *  polished. Very large numbers of markers can now be managed without causing Javascript timeout\n *  errors on Internet Explorer. Note that the name of the <code>clusterclick</code> event has been\n *  deprecated. The new name is <code>click</code>, so please change your application code now.\n */\n\n/**\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @name ClusterIconStyle\n * @class This class represents the object for values in the <code>styles</code> array passed\n *  to the {@link MarkerClusterer} constructor. The element in this array that is used to\n *  style the cluster icon is determined by calling the <code>calculator</code> function.\n *\n * @property {string} url The URL of the cluster icon image file. Required.\n * @property {number} height The display height (in pixels) of the cluster icon. Required.\n * @property {number} width The display width (in pixels) of the cluster icon. Required.\n * @property {Array} [anchorText] The position (in pixels) from the center of the cluster icon to\n *  where the text label is to be centered and drawn. The format is <code>[yoffset, xoffset]</code>\n *  where <code>yoffset</code> increases as you go down from center and <code>xoffset</code>\n *  increases to the right of center. The default is <code>[0, 0]</code>.\n * @property {Array} [anchorIcon] The anchor position (in pixels) of the cluster icon. This is the\n *  spot on the cluster icon that is to be aligned with the cluster position. The format is\n *  <code>[yoffset, xoffset]</code> where <code>yoffset</code> increases as you go down and\n *  <code>xoffset</code> increases to the right of the top-left corner of the icon. The default\n *  anchor position is the center of the cluster icon.\n * @property {string} [textColor=\"black\"] The color of the label text shown on the\n *  cluster icon.\n * @property {number} [textSize=11] The size (in pixels) of the label text shown on the\n *  cluster icon.\n * @property {string} [textDecoration=\"none\"] The value of the CSS <code>text-decoration</code>\n *  property for the label text shown on the cluster icon.\n * @property {string} [fontWeight=\"bold\"] The value of the CSS <code>font-weight</code>\n *  property for the label text shown on the cluster icon.\n * @property {string} [fontStyle=\"normal\"] The value of the CSS <code>font-style</code>\n *  property for the label text shown on the cluster icon.\n * @property {string} [fontFamily=\"Arial,sans-serif\"] The value of the CSS <code>font-family</code>\n *  property for the label text shown on the cluster icon.\n * @property {string} [backgroundPosition=\"0 0\"] The position of the cluster icon image\n *  within the image defined by <code>url</code>. The format is <code>\"xpos ypos\"</code>\n *  (the same format as for the CSS <code>background-position</code> property). You must set\n *  this property appropriately when the image defined by <code>url</code> represents a sprite\n *  containing multiple images. Note that the position <i>must</i> be specified in px units.\n */\n/**\n * @name ClusterIconInfo\n * @class This class is an object containing general information about a cluster icon. This is\n *  the object that a <code>calculator</code> function returns.\n *\n * @property {string} text The text of the label to be shown on the cluster icon.\n * @property {number} index The index plus 1 of the element in the <code>styles</code>\n *  array to be used to style the cluster icon.\n * @property {string} title The tooltip to display when the mouse moves over the cluster icon.\n *  If this value is <code>undefined</code> or <code>\"\"</code>, <code>title</code> is set to the\n *  value of the <code>title</code> property passed to the MarkerClusterer.\n */\n/**\n * A cluster icon.\n *\n * @constructor\n * @extends google.maps.OverlayView\n * @param {Cluster} cluster The cluster with which the icon is to be associated.\n * @param {Array} [styles] An array of {@link ClusterIconStyle} defining the cluster icons\n *  to use for various cluster sizes.\n * @private\n */\nfunction ClusterIcon(cluster, styles) {\n  cluster.getMarkerClusterer().extend(ClusterIcon, google.maps.OverlayView);\n\n  this.cluster_ = cluster;\n  this.className_ = cluster.getMarkerClusterer().getClusterClass();\n  this.styles_ = styles;\n  this.center_ = null;\n  this.div_ = null;\n  this.sums_ = null;\n  this.visible_ = false;\n\n  this.setMap(cluster.getMap()); // Note: this causes onAdd to be called\n}\n\n\n/**\n * Adds the icon to the DOM.\n */\nClusterIcon.prototype.onAdd = function () {\n  var cClusterIcon = this;\n  var cMouseDownInCluster;\n  var cDraggingMapByCluster;\n\n  this.div_ = document.createElement(\"div\");\n  this.div_.className = this.className_;\n  if (this.visible_) {\n    this.show();\n  }\n\n  this.getPanes().overlayMouseTarget.appendChild(this.div_);\n\n  // Fix for Issue 157\n  this.boundsChangedListener_ = google.maps.event.addListener(this.getMap(), \"bounds_changed\", function () {\n    cDraggingMapByCluster = cMouseDownInCluster;\n  });\n\n  google.maps.event.addDomListener(this.div_, \"mousedown\", function () {\n    cMouseDownInCluster = true;\n    cDraggingMapByCluster = false;\n  });\n\n  google.maps.event.addDomListener(this.div_, \"click\", function (e) {\n    cMouseDownInCluster = false;\n    if (!cDraggingMapByCluster) {\n      var theBounds;\n      var mz;\n      var mc = cClusterIcon.cluster_.getMarkerClusterer();\n      /**\n       * This event is fired when a cluster marker is clicked.\n       * @name MarkerClusterer#click\n       * @param {Cluster} c The cluster that was clicked.\n       * @event\n       */\n      google.maps.event.trigger(mc, \"click\", cClusterIcon.cluster_);\n      google.maps.event.trigger(mc, \"clusterclick\", cClusterIcon.cluster_); // deprecated name\n\n      // The default click handler follows. Disable it by setting\n      // the zoomOnClick property to false.\n      if (mc.getZoomOnClick()) {\n        // Zoom into the cluster.\n        mz = mc.getMaxZoom();\n        theBounds = cClusterIcon.cluster_.getBounds();\n        mc.getMap().fitBounds(theBounds);\n        // There is a fix for Issue 170 here:\n        setTimeout(function () {\n          mc.getMap().fitBounds(theBounds);\n          // Don't zoom beyond the max zoom level\n          if (mz !== null && (mc.getMap().getZoom() > mz)) {\n            mc.getMap().setZoom(mz + 1);\n          }\n        }, 100);\n      }\n\n      // Prevent event propagation to the map:\n      e.cancelBubble = true;\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      }\n    }\n  });\n\n  google.maps.event.addDomListener(this.div_, \"mouseover\", function () {\n    var mc = cClusterIcon.cluster_.getMarkerClusterer();\n    /**\n     * This event is fired when the mouse moves over a cluster marker.\n     * @name MarkerClusterer#mouseover\n     * @param {Cluster} c The cluster that the mouse moved over.\n     * @event\n     */\n    google.maps.event.trigger(mc, \"mouseover\", cClusterIcon.cluster_);\n  });\n\n  google.maps.event.addDomListener(this.div_, \"mouseout\", function () {\n    var mc = cClusterIcon.cluster_.getMarkerClusterer();\n    /**\n     * This event is fired when the mouse moves out of a cluster marker.\n     * @name MarkerClusterer#mouseout\n     * @param {Cluster} c The cluster that the mouse moved out of.\n     * @event\n     */\n    google.maps.event.trigger(mc, \"mouseout\", cClusterIcon.cluster_);\n  });\n};\n\n\n/**\n * Removes the icon from the DOM.\n */\nClusterIcon.prototype.onRemove = function () {\n  if (this.div_ && this.div_.parentNode) {\n    this.hide();\n    google.maps.event.removeListener(this.boundsChangedListener_);\n    google.maps.event.clearInstanceListeners(this.div_);\n    this.div_.parentNode.removeChild(this.div_);\n    this.div_ = null;\n  }\n};\n\n\n/**\n * Draws the icon.\n */\nClusterIcon.prototype.draw = function () {\n  if (this.visible_) {\n    var pos = this.getPosFromLatLng_(this.center_);\n    this.div_.style.top = pos.y + \"px\";\n    this.div_.style.left = pos.x + \"px\";\n  }\n};\n\n\n/**\n * Hides the icon.\n */\nClusterIcon.prototype.hide = function () {\n  if (this.div_) {\n    this.div_.style.display = \"none\";\n  }\n  this.visible_ = false;\n};\n\n\n/**\n * Positions and shows the icon.\n */\nClusterIcon.prototype.show = function () {\n  if (this.div_) {\n    var img = \"\";\n    // NOTE: values must be specified in px units\n    var bp = this.backgroundPosition_.split(\" \");\n    var spriteH = parseInt(bp[0].replace(/^\\s+|\\s+$/g, \"\"), 10);\n    var spriteV = parseInt(bp[1].replace(/^\\s+|\\s+$/g, \"\"), 10);\n    var pos = this.getPosFromLatLng_(this.center_);\n    this.div_.style.cssText = this.createCss(pos);\n    img = \"<img src='\" + this.url_ + \"' style='position: absolute; top: \" + spriteV + \"px; left: \" + spriteH + \"px; \";\n    if (!this.cluster_.getMarkerClusterer().enableRetinaIcons_) {\n      img += \"clip: rect(\" + (-1 * spriteV) + \"px, \" + ((-1 * spriteH) + this.width_) + \"px, \" +\n          ((-1 * spriteV) + this.height_) + \"px, \" + (-1 * spriteH) + \"px);\";\n    }\n    img += \"'>\";\n    this.div_.innerHTML = img + \"<div style='\" +\n        \"position: absolute;\" +\n        \"top: \" + this.anchorText_[0] + \"px;\" +\n        \"left: \" + this.anchorText_[1] + \"px;\" +\n        \"color: \" + this.textColor_ + \";\" +\n        \"font-size: \" + this.textSize_ + \"px;\" +\n        \"font-family: \" + this.fontFamily_ + \";\" +\n        \"font-weight: \" + this.fontWeight_ + \";\" +\n        \"font-style: \" + this.fontStyle_ + \";\" +\n        \"text-decoration: \" + this.textDecoration_ + \";\" +\n        \"text-align: center;\" +\n        \"width: \" + this.width_ + \"px;\" +\n        \"line-height:\" + this.height_ + \"px;\" +\n        \"'>\" + this.sums_.text + \"</div>\";\n    if (typeof this.sums_.title === \"undefined\" || this.sums_.title === \"\") {\n      this.div_.title = this.cluster_.getMarkerClusterer().getTitle();\n    } else {\n      this.div_.title = this.sums_.title;\n    }\n    this.div_.style.display = \"\";\n  }\n  this.visible_ = true;\n};\n\n\n/**\n * Sets the icon styles to the appropriate element in the styles array.\n *\n * @param {ClusterIconInfo} sums The icon label text and styles index.\n */\nClusterIcon.prototype.useStyle = function (sums) {\n  this.sums_ = sums;\n  var index = Math.max(0, sums.index - 1);\n  index = Math.min(this.styles_.length - 1, index);\n  var style = this.styles_[index];\n  this.url_ = style.url;\n  this.height_ = style.height;\n  this.width_ = style.width;\n  this.anchorText_ = style.anchorText || [0, 0];\n  this.anchorIcon_ = style.anchorIcon || [parseInt(this.height_ / 2, 10), parseInt(this.width_ / 2, 10)];\n  this.textColor_ = style.textColor || \"black\";\n  this.textSize_ = style.textSize || 11;\n  this.textDecoration_ = style.textDecoration || \"none\";\n  this.fontWeight_ = style.fontWeight || \"bold\";\n  this.fontStyle_ = style.fontStyle || \"normal\";\n  this.fontFamily_ = style.fontFamily || \"Arial,sans-serif\";\n  this.backgroundPosition_ = style.backgroundPosition || \"0 0\";\n};\n\n\n/**\n * Sets the position at which to center the icon.\n *\n * @param {google.maps.LatLng} center The latlng to set as the center.\n */\nClusterIcon.prototype.setCenter = function (center) {\n  this.center_ = center;\n};\n\n\n/**\n * Creates the cssText style parameter based on the position of the icon.\n *\n * @param {google.maps.Point} pos The position of the icon.\n * @return {string} The CSS style text.\n */\nClusterIcon.prototype.createCss = function (pos) {\n  var style = [];\n  style.push(\"cursor: pointer;\");\n  style.push(\"position: absolute; top: \" + pos.y + \"px; left: \" + pos.x + \"px;\");\n  style.push(\"width: \" + this.width_ + \"px; height: \" + this.height_ + \"px;\");\n  return style.join(\"\");\n};\n\n\n/**\n * Returns the position at which to place the DIV depending on the latlng.\n *\n * @param {google.maps.LatLng} latlng The position in latlng.\n * @return {google.maps.Point} The position in pixels.\n */\nClusterIcon.prototype.getPosFromLatLng_ = function (latlng) {\n  var pos = this.getProjection().fromLatLngToDivPixel(latlng);\n  pos.x -= this.anchorIcon_[1];\n  pos.y -= this.anchorIcon_[0];\n  pos.x = parseInt(pos.x, 10);\n  pos.y = parseInt(pos.y, 10);\n  return pos;\n};\n\n\n/**\n * Creates a single cluster that manages a group of proximate markers.\n *  Used internally, do not call this constructor directly.\n * @constructor\n * @param {MarkerClusterer} mc The <code>MarkerClusterer</code> object with which this\n *  cluster is associated.\n */\nfunction Cluster(mc) {\n  this.markerClusterer_ = mc;\n  this.map_ = mc.getMap();\n  this.gridSize_ = mc.getGridSize();\n  this.minClusterSize_ = mc.getMinimumClusterSize();\n  this.averageCenter_ = mc.getAverageCenter();\n  this.markers_ = [];\n  this.center_ = null;\n  this.bounds_ = null;\n  this.clusterIcon_ = new ClusterIcon(this, mc.getStyles());\n}\n\n\n/**\n * Returns the number of markers managed by the cluster. You can call this from\n * a <code>click</code>, <code>mouseover</code>, or <code>mouseout</code> event handler\n * for the <code>MarkerClusterer</code> object.\n *\n * @return {number} The number of markers in the cluster.\n */\nCluster.prototype.getSize = function () {\n  return this.markers_.length;\n};\n\n\n/**\n * Returns the array of markers managed by the cluster. You can call this from\n * a <code>click</code>, <code>mouseover</code>, or <code>mouseout</code> event handler\n * for the <code>MarkerClusterer</code> object.\n *\n * @return {Array} The array of markers in the cluster.\n */\nCluster.prototype.getMarkers = function () {\n  return this.markers_;\n};\n\n\n/**\n * Returns the center of the cluster. You can call this from\n * a <code>click</code>, <code>mouseover</code>, or <code>mouseout</code> event handler\n * for the <code>MarkerClusterer</code> object.\n *\n * @return {google.maps.LatLng} The center of the cluster.\n */\nCluster.prototype.getCenter = function () {\n  return this.center_;\n};\n\n\n/**\n * Returns the map with which the cluster is associated.\n *\n * @return {google.maps.Map} The map.\n * @ignore\n */\nCluster.prototype.getMap = function () {\n  return this.map_;\n};\n\n\n/**\n * Returns the <code>MarkerClusterer</code> object with which the cluster is associated.\n *\n * @return {MarkerClusterer} The associated marker clusterer.\n * @ignore\n */\nCluster.prototype.getMarkerClusterer = function () {\n  return this.markerClusterer_;\n};\n\n\n/**\n * Returns the bounds of the cluster.\n *\n * @return {google.maps.LatLngBounds} the cluster bounds.\n * @ignore\n */\nCluster.prototype.getBounds = function () {\n  var i;\n  var bounds = new google.maps.LatLngBounds(this.center_, this.center_);\n  var markers = this.getMarkers();\n  for (i = 0; i < markers.length; i++) {\n    bounds.extend(markers[i].getPosition());\n  }\n  return bounds;\n};\n\n\n/**\n * Removes the cluster from the map.\n *\n * @ignore\n */\nCluster.prototype.remove = function () {\n  this.clusterIcon_.setMap(null);\n  this.markers_ = [];\n  delete this.markers_;\n};\n\n\n/**\n * Adds a marker to the cluster.\n *\n * @param {google.maps.Marker} marker The marker to be added.\n * @return {boolean} True if the marker was added.\n * @ignore\n */\nCluster.prototype.addMarker = function (marker) {\n  var i;\n  var mCount;\n  var mz;\n\n  if (this.isMarkerAlreadyAdded_(marker)) {\n    return false;\n  }\n\n  if (!this.center_) {\n    this.center_ = marker.getPosition();\n    this.calculateBounds_();\n  } else {\n    if (this.averageCenter_) {\n      var l = this.markers_.length + 1;\n      var lat = (this.center_.lat() * (l - 1) + marker.getPosition().lat()) / l;\n      var lng = (this.center_.lng() * (l - 1) + marker.getPosition().lng()) / l;\n      this.center_ = new google.maps.LatLng(lat, lng);\n      this.calculateBounds_();\n    }\n  }\n\n  marker.isAdded = true;\n  this.markers_.push(marker);\n\n  mCount = this.markers_.length;\n  mz = this.markerClusterer_.getMaxZoom();\n  if (mz !== null && this.map_.getZoom() > mz) {\n    // Zoomed in past max zoom, so show the marker.\n    if (marker.getMap() !== this.map_) {\n      marker.setMap(this.map_);\n    }\n  } else if (mCount < this.minClusterSize_) {\n    // Min cluster size not reached so show the marker.\n    if (marker.getMap() !== this.map_) {\n      marker.setMap(this.map_);\n    }\n  } else if (mCount === this.minClusterSize_) {\n    // Hide the markers that were showing.\n    for (i = 0; i < mCount; i++) {\n      this.markers_[i].setMap(null);\n    }\n  } else {\n    marker.setMap(null);\n  }\n\n  this.updateIcon_();\n  return true;\n};\n\n\n/**\n * Determines if a marker lies within the cluster's bounds.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @return {boolean} True if the marker lies in the bounds.\n * @ignore\n */\nCluster.prototype.isMarkerInClusterBounds = function (marker) {\n  return this.bounds_.contains(marker.getPosition());\n};\n\n\n/**\n * Calculates the extended bounds of the cluster with the grid.\n */\nCluster.prototype.calculateBounds_ = function () {\n  var bounds = new google.maps.LatLngBounds(this.center_, this.center_);\n  this.bounds_ = this.markerClusterer_.getExtendedBounds(bounds);\n};\n\n\n/**\n * Updates the cluster icon.\n */\nCluster.prototype.updateIcon_ = function () {\n  var mCount = this.markers_.length;\n  var mz = this.markerClusterer_.getMaxZoom();\n\n  if (mz !== null && this.map_.getZoom() > mz) {\n    this.clusterIcon_.hide();\n    return;\n  }\n\n  if (mCount < this.minClusterSize_) {\n    // Min cluster size not yet reached.\n    this.clusterIcon_.hide();\n    return;\n  }\n\n  var numStyles = this.markerClusterer_.getStyles().length;\n  var sums = this.markerClusterer_.getCalculator()(this.markers_, numStyles);\n  this.clusterIcon_.setCenter(this.center_);\n  this.clusterIcon_.useStyle(sums);\n  this.clusterIcon_.show();\n};\n\n\n/**\n * Determines if a marker has already been added to the cluster.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @return {boolean} True if the marker has already been added.\n */\nCluster.prototype.isMarkerAlreadyAdded_ = function (marker) {\n  var i;\n  if (this.markers_.indexOf) {\n    return this.markers_.indexOf(marker) !== -1;\n  } else {\n    for (i = 0; i < this.markers_.length; i++) {\n      if (marker === this.markers_[i]) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n\n/**\n * @name MarkerClustererOptions\n * @class This class represents the optional parameter passed to\n *  the {@link MarkerClusterer} constructor.\n * @property {number} [gridSize=60] The grid size of a cluster in pixels. The grid is a square.\n * @property {number} [maxZoom=null] The maximum zoom level at which clustering is enabled or\n *  <code>null</code> if clustering is to be enabled at all zoom levels.\n * @property {boolean} [zoomOnClick=true] Whether to zoom the map when a cluster marker is\n *  clicked. You may want to set this to <code>false</code> if you have installed a handler\n *  for the <code>click</code> event and it deals with zooming on its own.\n * @property {boolean} [averageCenter=false] Whether the position of a cluster marker should be\n *  the average position of all markers in the cluster. If set to <code>false</code>, the\n *  cluster marker is positioned at the location of the first marker added to the cluster.\n * @property {number} [minimumClusterSize=2] The minimum number of markers needed in a cluster\n *  before the markers are hidden and a cluster marker appears.\n * @property {boolean} [ignoreHidden=false] Whether to ignore hidden markers in clusters. You\n *  may want to set this to <code>true</code> to ensure that hidden markers are not included\n *  in the marker count that appears on a cluster marker (this count is the value of the\n *  <code>text</code> property of the result returned by the default <code>calculator</code>).\n *  If set to <code>true</code> and you change the visibility of a marker being clustered, be\n *  sure to also call <code>MarkerClusterer.repaint()</code>.\n * @property {string} [title=\"\"] The tooltip to display when the mouse moves over a cluster\n *  marker. (Alternatively, you can use a custom <code>calculator</code> function to specify a\n *  different tooltip for each cluster marker.)\n * @property {function} [calculator=MarkerClusterer.CALCULATOR] The function used to determine\n *  the text to be displayed on a cluster marker and the index indicating which style to use\n *  for the cluster marker. The input parameters for the function are (1) the array of markers\n *  represented by a cluster marker and (2) the number of cluster icon styles. It returns a\n *  {@link ClusterIconInfo} object. The default <code>calculator</code> returns a\n *  <code>text</code> property which is the number of markers in the cluster and an\n *  <code>index</code> property which is one higher than the lowest integer such that\n *  <code>10^i</code> exceeds the number of markers in the cluster, or the size of the styles\n *  array, whichever is less. The <code>styles</code> array element used has an index of\n *  <code>index</code> minus 1. For example, the default <code>calculator</code> returns a\n *  <code>text</code> value of <code>\"125\"</code> and an <code>index</code> of <code>3</code>\n *  for a cluster icon representing 125 markers so the element used in the <code>styles</code>\n *  array is <code>2</code>. A <code>calculator</code> may also return a <code>title</code>\n *  property that contains the text of the tooltip to be used for the cluster marker. If\n *   <code>title</code> is not defined, the tooltip is set to the value of the <code>title</code>\n *   property for the MarkerClusterer.\n * @property {string} [clusterClass=\"cluster\"] The name of the CSS class defining general styles\n *  for the cluster markers. Use this class to define CSS styles that are not set up by the code\n *  that processes the <code>styles</code> array.\n * @property {Array} [styles] An array of {@link ClusterIconStyle} elements defining the styles\n *  of the cluster markers to be used. The element to be used to style a given cluster marker\n *  is determined by the function defined by the <code>calculator</code> property.\n *  The default is an array of {@link ClusterIconStyle} elements whose properties are derived\n *  from the values for <code>imagePath</code>, <code>imageExtension</code>, and\n *  <code>imageSizes</code>.\n * @property {boolean} [enableRetinaIcons=false] Whether to allow the use of cluster icons that\n * have sizes that are some multiple (typically double) of their actual display size. Icons such\n * as these look better when viewed on high-resolution monitors such as Apple's Retina displays.\n * Note: if this property is <code>true</code>, sprites cannot be used as cluster icons.\n * @property {number} [batchSize=MarkerClusterer.BATCH_SIZE] Set this property to the\n *  number of markers to be processed in a single batch when using a browser other than\n *  Internet Explorer (for Internet Explorer, use the batchSizeIE property instead).\n * @property {number} [batchSizeIE=MarkerClusterer.BATCH_SIZE_IE] When Internet Explorer is\n *  being used, markers are processed in several batches with a small delay inserted between\n *  each batch in an attempt to avoid Javascript timeout errors. Set this property to the\n *  number of markers to be processed in a single batch; select as high a number as you can\n *  without causing a timeout error in the browser. This number might need to be as low as 100\n *  if 15,000 markers are being managed, for example.\n * @property {string} [imagePath=MarkerClusterer.IMAGE_PATH]\n *  The full URL of the root name of the group of image files to use for cluster icons.\n *  The complete file name is of the form <code>imagePath</code>n.<code>imageExtension</code>\n *  where n is the image file number (1, 2, etc.).\n * @property {string} [imageExtension=MarkerClusterer.IMAGE_EXTENSION]\n *  The extension name for the cluster icon image files (e.g., <code>\"png\"</code> or\n *  <code>\"jpg\"</code>).\n * @property {Array} [imageSizes=MarkerClusterer.IMAGE_SIZES]\n *  An array of numbers containing the widths of the group of\n *  <code>imagePath</code>n.<code>imageExtension</code> image files.\n *  (The images are assumed to be square.)\n */\n/**\n * Creates a MarkerClusterer object with the options specified in {@link MarkerClustererOptions}.\n * @constructor\n * @extends google.maps.OverlayView\n * @param {google.maps.Map} map The Google map to attach to.\n * @param {Array.<google.maps.Marker>} [opt_markers] The markers to be added to the cluster.\n * @param {MarkerClustererOptions} [opt_options] The optional parameters.\n */\nfunction MarkerClusterer(map, opt_markers, opt_options) {\n  // MarkerClusterer implements google.maps.OverlayView interface. We use the\n  // extend function to extend MarkerClusterer with google.maps.OverlayView\n  // because it might not always be available when the code is defined so we\n  // look for it at the last possible moment. If it doesn't exist now then\n  // there is no point going ahead :)\n  this.extend(MarkerClusterer, google.maps.OverlayView);\n\n  opt_markers = opt_markers || [];\n  opt_options = opt_options || {};\n\n  this.markers_ = [];\n  this.clusters_ = [];\n  this.listeners_ = [];\n  this.activeMap_ = null;\n  this.ready_ = false;\n\n  this.gridSize_ = opt_options.gridSize || 60;\n  this.minClusterSize_ = opt_options.minimumClusterSize || 2;\n  this.maxZoom_ = opt_options.maxZoom || null;\n  this.styles_ = opt_options.styles || [];\n  this.title_ = opt_options.title || \"\";\n  this.zoomOnClick_ = true;\n  if (opt_options.zoomOnClick !== undefined) {\n    this.zoomOnClick_ = opt_options.zoomOnClick;\n  }\n  this.averageCenter_ = false;\n  if (opt_options.averageCenter !== undefined) {\n    this.averageCenter_ = opt_options.averageCenter;\n  }\n  this.ignoreHidden_ = false;\n  if (opt_options.ignoreHidden !== undefined) {\n    this.ignoreHidden_ = opt_options.ignoreHidden;\n  }\n  this.enableRetinaIcons_ = false;\n  if (opt_options.enableRetinaIcons !== undefined) {\n    this.enableRetinaIcons_ = opt_options.enableRetinaIcons;\n  }\n  this.imagePath_ = opt_options.imagePath || MarkerClusterer.IMAGE_PATH;\n  this.imageExtension_ = opt_options.imageExtension || MarkerClusterer.IMAGE_EXTENSION;\n  this.imageSizes_ = opt_options.imageSizes || MarkerClusterer.IMAGE_SIZES;\n  this.calculator_ = opt_options.calculator || MarkerClusterer.CALCULATOR;\n  this.batchSize_ = opt_options.batchSize || MarkerClusterer.BATCH_SIZE;\n  this.batchSizeIE_ = opt_options.batchSizeIE || MarkerClusterer.BATCH_SIZE_IE;\n  this.clusterClass_ = opt_options.clusterClass || \"cluster\";\n\n  if (navigator.userAgent.toLowerCase().indexOf(\"msie\") !== -1) {\n    // Try to avoid IE timeout when processing a huge number of markers:\n    this.batchSize_ = this.batchSizeIE_;\n  }\n\n  this.setupStyles_();\n\n  this.addMarkers(opt_markers, true);\n  this.setMap(map); // Note: this causes onAdd to be called\n}\n\n\n/**\n * Implementation of the onAdd interface method.\n * @ignore\n */\nMarkerClusterer.prototype.onAdd = function () {\n  var cMarkerClusterer = this;\n\n  this.activeMap_ = this.getMap();\n  this.ready_ = true;\n\n  this.repaint();\n\n  // Add the map event listeners\n  this.listeners_ = [\n    google.maps.event.addListener(this.getMap(), \"zoom_changed\", function () {\n      cMarkerClusterer.resetViewport_(false);\n      // Workaround for this Google bug: when map is at level 0 and \"-\" of\n      // zoom slider is clicked, a \"zoom_changed\" event is fired even though\n      // the map doesn't zoom out any further. In this situation, no \"idle\"\n      // event is triggered so the cluster markers that have been removed\n      // do not get redrawn. Same goes for a zoom in at maxZoom.\n      if (this.getZoom() === (this.get(\"minZoom\") || 0) || this.getZoom() === this.get(\"maxZoom\")) {\n        google.maps.event.trigger(this, \"idle\");\n      }\n    }),\n    google.maps.event.addListener(this.getMap(), \"idle\", function () {\n      cMarkerClusterer.redraw_();\n    })\n  ];\n};\n\n\n/**\n * Implementation of the onRemove interface method.\n * Removes map event listeners and all cluster icons from the DOM.\n * All managed markers are also put back on the map.\n * @ignore\n */\nMarkerClusterer.prototype.onRemove = function () {\n  var i;\n\n  // Put all the managed markers back on the map:\n  for (i = 0; i < this.markers_.length; i++) {\n    if (this.markers_[i].getMap() !== this.activeMap_) {\n      this.markers_[i].setMap(this.activeMap_);\n    }\n  }\n\n  // Remove all clusters:\n  for (i = 0; i < this.clusters_.length; i++) {\n    this.clusters_[i].remove();\n  }\n  this.clusters_ = [];\n\n  // Remove map event listeners:\n  for (i = 0; i < this.listeners_.length; i++) {\n    google.maps.event.removeListener(this.listeners_[i]);\n  }\n  this.listeners_ = [];\n\n  this.activeMap_ = null;\n  this.ready_ = false;\n};\n\n\n/**\n * Implementation of the draw interface method.\n * @ignore\n */\nMarkerClusterer.prototype.draw = function () {};\n\n\n/**\n * Sets up the styles object.\n */\nMarkerClusterer.prototype.setupStyles_ = function () {\n  var i, size;\n  if (this.styles_.length > 0) {\n    return;\n  }\n\n  for (i = 0; i < this.imageSizes_.length; i++) {\n    size = this.imageSizes_[i];\n    this.styles_.push({\n      url: this.imagePath_ + (i + 1) + \".\" + this.imageExtension_,\n      height: size,\n      width: size\n    });\n  }\n};\n\n\n/**\n *  Fits the map to the bounds of the markers managed by the clusterer.\n */\nMarkerClusterer.prototype.fitMapToMarkers = function () {\n  var i;\n  var markers = this.getMarkers();\n  var bounds = new google.maps.LatLngBounds();\n  for (i = 0; i < markers.length; i++) {\n    bounds.extend(markers[i].getPosition());\n  }\n\n  this.getMap().fitBounds(bounds);\n};\n\n\n/**\n * Returns the value of the <code>gridSize</code> property.\n *\n * @return {number} The grid size.\n */\nMarkerClusterer.prototype.getGridSize = function () {\n  return this.gridSize_;\n};\n\n\n/**\n * Sets the value of the <code>gridSize</code> property.\n *\n * @param {number} gridSize The grid size.\n */\nMarkerClusterer.prototype.setGridSize = function (gridSize) {\n  this.gridSize_ = gridSize;\n};\n\n\n/**\n * Returns the value of the <code>minimumClusterSize</code> property.\n *\n * @return {number} The minimum cluster size.\n */\nMarkerClusterer.prototype.getMinimumClusterSize = function () {\n  return this.minClusterSize_;\n};\n\n/**\n * Sets the value of the <code>minimumClusterSize</code> property.\n *\n * @param {number} minimumClusterSize The minimum cluster size.\n */\nMarkerClusterer.prototype.setMinimumClusterSize = function (minimumClusterSize) {\n  this.minClusterSize_ = minimumClusterSize;\n};\n\n\n/**\n *  Returns the value of the <code>maxZoom</code> property.\n *\n *  @return {number} The maximum zoom level.\n */\nMarkerClusterer.prototype.getMaxZoom = function () {\n  return this.maxZoom_;\n};\n\n\n/**\n *  Sets the value of the <code>maxZoom</code> property.\n *\n *  @param {number} maxZoom The maximum zoom level.\n */\nMarkerClusterer.prototype.setMaxZoom = function (maxZoom) {\n  this.maxZoom_ = maxZoom;\n};\n\n\n/**\n *  Returns the value of the <code>styles</code> property.\n *\n *  @return {Array} The array of styles defining the cluster markers to be used.\n */\nMarkerClusterer.prototype.getStyles = function () {\n  return this.styles_;\n};\n\n\n/**\n *  Sets the value of the <code>styles</code> property.\n *\n *  @param {Array.<ClusterIconStyle>} styles The array of styles to use.\n */\nMarkerClusterer.prototype.setStyles = function (styles) {\n  this.styles_ = styles;\n};\n\n\n/**\n * Returns the value of the <code>title</code> property.\n *\n * @return {string} The content of the title text.\n */\nMarkerClusterer.prototype.getTitle = function () {\n  return this.title_;\n};\n\n\n/**\n *  Sets the value of the <code>title</code> property.\n *\n *  @param {string} title The value of the title property.\n */\nMarkerClusterer.prototype.setTitle = function (title) {\n  this.title_ = title;\n};\n\n\n/**\n * Returns the value of the <code>zoomOnClick</code> property.\n *\n * @return {boolean} True if zoomOnClick property is set.\n */\nMarkerClusterer.prototype.getZoomOnClick = function () {\n  return this.zoomOnClick_;\n};\n\n\n/**\n *  Sets the value of the <code>zoomOnClick</code> property.\n *\n *  @param {boolean} zoomOnClick The value of the zoomOnClick property.\n */\nMarkerClusterer.prototype.setZoomOnClick = function (zoomOnClick) {\n  this.zoomOnClick_ = zoomOnClick;\n};\n\n\n/**\n * Returns the value of the <code>averageCenter</code> property.\n *\n * @return {boolean} True if averageCenter property is set.\n */\nMarkerClusterer.prototype.getAverageCenter = function () {\n  return this.averageCenter_;\n};\n\n\n/**\n *  Sets the value of the <code>averageCenter</code> property.\n *\n *  @param {boolean} averageCenter The value of the averageCenter property.\n */\nMarkerClusterer.prototype.setAverageCenter = function (averageCenter) {\n  this.averageCenter_ = averageCenter;\n};\n\n\n/**\n * Returns the value of the <code>ignoreHidden</code> property.\n *\n * @return {boolean} True if ignoreHidden property is set.\n */\nMarkerClusterer.prototype.getIgnoreHidden = function () {\n  return this.ignoreHidden_;\n};\n\n\n/**\n *  Sets the value of the <code>ignoreHidden</code> property.\n *\n *  @param {boolean} ignoreHidden The value of the ignoreHidden property.\n */\nMarkerClusterer.prototype.setIgnoreHidden = function (ignoreHidden) {\n  this.ignoreHidden_ = ignoreHidden;\n};\n\n\n/**\n * Returns the value of the <code>enableRetinaIcons</code> property.\n *\n * @return {boolean} True if enableRetinaIcons property is set.\n */\nMarkerClusterer.prototype.getEnableRetinaIcons = function () {\n  return this.enableRetinaIcons_;\n};\n\n\n/**\n *  Sets the value of the <code>enableRetinaIcons</code> property.\n *\n *  @param {boolean} enableRetinaIcons The value of the enableRetinaIcons property.\n */\nMarkerClusterer.prototype.setEnableRetinaIcons = function (enableRetinaIcons) {\n  this.enableRetinaIcons_ = enableRetinaIcons;\n};\n\n\n/**\n * Returns the value of the <code>imageExtension</code> property.\n *\n * @return {string} The value of the imageExtension property.\n */\nMarkerClusterer.prototype.getImageExtension = function () {\n  return this.imageExtension_;\n};\n\n\n/**\n *  Sets the value of the <code>imageExtension</code> property.\n *\n *  @param {string} imageExtension The value of the imageExtension property.\n */\nMarkerClusterer.prototype.setImageExtension = function (imageExtension) {\n  this.imageExtension_ = imageExtension;\n};\n\n\n/**\n * Returns the value of the <code>imagePath</code> property.\n *\n * @return {string} The value of the imagePath property.\n */\nMarkerClusterer.prototype.getImagePath = function () {\n  return this.imagePath_;\n};\n\n\n/**\n *  Sets the value of the <code>imagePath</code> property.\n *\n *  @param {string} imagePath The value of the imagePath property.\n */\nMarkerClusterer.prototype.setImagePath = function (imagePath) {\n  this.imagePath_ = imagePath;\n};\n\n\n/**\n * Returns the value of the <code>imageSizes</code> property.\n *\n * @return {Array} The value of the imageSizes property.\n */\nMarkerClusterer.prototype.getImageSizes = function () {\n  return this.imageSizes_;\n};\n\n\n/**\n *  Sets the value of the <code>imageSizes</code> property.\n *\n *  @param {Array} imageSizes The value of the imageSizes property.\n */\nMarkerClusterer.prototype.setImageSizes = function (imageSizes) {\n  this.imageSizes_ = imageSizes;\n};\n\n\n/**\n * Returns the value of the <code>calculator</code> property.\n *\n * @return {function} the value of the calculator property.\n */\nMarkerClusterer.prototype.getCalculator = function () {\n  return this.calculator_;\n};\n\n\n/**\n * Sets the value of the <code>calculator</code> property.\n *\n * @param {function(Array.<google.maps.Marker>, number)} calculator The value\n *  of the calculator property.\n */\nMarkerClusterer.prototype.setCalculator = function (calculator) {\n  this.calculator_ = calculator;\n};\n\n\n/**\n * Returns the value of the <code>batchSizeIE</code> property.\n *\n * @return {number} the value of the batchSizeIE property.\n */\nMarkerClusterer.prototype.getBatchSizeIE = function () {\n  return this.batchSizeIE_;\n};\n\n\n/**\n * Sets the value of the <code>batchSizeIE</code> property.\n *\n *  @param {number} batchSizeIE The value of the batchSizeIE property.\n */\nMarkerClusterer.prototype.setBatchSizeIE = function (batchSizeIE) {\n  this.batchSizeIE_ = batchSizeIE;\n};\n\n\n/**\n * Returns the value of the <code>clusterClass</code> property.\n *\n * @return {string} the value of the clusterClass property.\n */\nMarkerClusterer.prototype.getClusterClass = function () {\n  return this.clusterClass_;\n};\n\n\n/**\n * Sets the value of the <code>clusterClass</code> property.\n *\n *  @param {string} clusterClass The value of the clusterClass property.\n */\nMarkerClusterer.prototype.setClusterClass = function (clusterClass) {\n  this.clusterClass_ = clusterClass;\n};\n\n\n/**\n *  Returns the array of markers managed by the clusterer.\n *\n *  @return {Array} The array of markers managed by the clusterer.\n */\nMarkerClusterer.prototype.getMarkers = function () {\n  return this.markers_;\n};\n\n\n/**\n *  Returns the number of markers managed by the clusterer.\n *\n *  @return {number} The number of markers.\n */\nMarkerClusterer.prototype.getTotalMarkers = function () {\n  return this.markers_.length;\n};\n\n\n/**\n * Returns the current array of clusters formed by the clusterer.\n *\n * @return {Array} The array of clusters formed by the clusterer.\n */\nMarkerClusterer.prototype.getClusters = function () {\n  return this.clusters_;\n};\n\n\n/**\n * Returns the number of clusters formed by the clusterer.\n *\n * @return {number} The number of clusters formed by the clusterer.\n */\nMarkerClusterer.prototype.getTotalClusters = function () {\n  return this.clusters_.length;\n};\n\n\n/**\n * Adds a marker to the clusterer. The clusters are redrawn unless\n *  <code>opt_nodraw</code> is set to <code>true</code>.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @param {boolean} [opt_nodraw] Set to <code>true</code> to prevent redrawing.\n */\nMarkerClusterer.prototype.addMarker = function (marker, opt_nodraw) {\n  this.pushMarkerTo_(marker);\n  if (!opt_nodraw) {\n    this.redraw_();\n  }\n};\n\n\n/**\n * Adds an array of markers to the clusterer. The clusters are redrawn unless\n *  <code>opt_nodraw</code> is set to <code>true</code>.\n *\n * @param {Array.<google.maps.Marker>} markers The markers to add.\n * @param {boolean} [opt_nodraw] Set to <code>true</code> to prevent redrawing.\n */\nMarkerClusterer.prototype.addMarkers = function (markers, opt_nodraw) {\n  var key;\n  for (key in markers) {\n    if (markers.hasOwnProperty(key)) {\n      this.pushMarkerTo_(markers[key]);\n    }\n  }  \n  if (!opt_nodraw) {\n    this.redraw_();\n  }\n};\n\n\n/**\n * Pushes a marker to the clusterer.\n *\n * @param {google.maps.Marker} marker The marker to add.\n */\nMarkerClusterer.prototype.pushMarkerTo_ = function (marker) {\n  // If the marker is draggable add a listener so we can update the clusters on the dragend:\n  if (marker.getDraggable()) {\n    var cMarkerClusterer = this;\n    google.maps.event.addListener(marker, \"dragend\", function () {\n      if (cMarkerClusterer.ready_) {\n        this.isAdded = false;\n        cMarkerClusterer.repaint();\n      }\n    });\n  }\n  marker.isAdded = false;\n  this.markers_.push(marker);\n};\n\n\n/**\n * Removes a marker from the cluster.  The clusters are redrawn unless\n *  <code>opt_nodraw</code> is set to <code>true</code>. Returns <code>true</code> if the\n *  marker was removed from the clusterer.\n *\n * @param {google.maps.Marker} marker The marker to remove.\n * @param {boolean} [opt_nodraw] Set to <code>true</code> to prevent redrawing.\n * @return {boolean} True if the marker was removed from the clusterer.\n */\nMarkerClusterer.prototype.removeMarker = function (marker, opt_nodraw) {\n  var removed = this.removeMarker_(marker);\n\n  if (!opt_nodraw && removed) {\n    this.repaint();\n  }\n\n  return removed;\n};\n\n\n/**\n * Removes an array of markers from the cluster. The clusters are redrawn unless\n *  <code>opt_nodraw</code> is set to <code>true</code>. Returns <code>true</code> if markers\n *  were removed from the clusterer.\n *\n * @param {Array.<google.maps.Marker>} markers The markers to remove.\n * @param {boolean} [opt_nodraw] Set to <code>true</code> to prevent redrawing.\n * @return {boolean} True if markers were removed from the clusterer.\n */\nMarkerClusterer.prototype.removeMarkers = function (markers, opt_nodraw) {\n  var i, r;\n  var removed = false;\n\n  for (i = 0; i < markers.length; i++) {\n    r = this.removeMarker_(markers[i]);\n    removed = removed || r;\n  }\n\n  if (!opt_nodraw && removed) {\n    this.repaint();\n  }\n\n  return removed;\n};\n\n\n/**\n * Removes a marker and returns true if removed, false if not.\n *\n * @param {google.maps.Marker} marker The marker to remove\n * @return {boolean} Whether the marker was removed or not\n */\nMarkerClusterer.prototype.removeMarker_ = function (marker) {\n  var i;\n  var index = -1;\n  if (this.markers_.indexOf) {\n    index = this.markers_.indexOf(marker);\n  } else {\n    for (i = 0; i < this.markers_.length; i++) {\n      if (marker === this.markers_[i]) {\n        index = i;\n        break;\n      }\n    }\n  }\n\n  if (index === -1) {\n    // Marker is not in our list of markers, so do nothing:\n    return false;\n  }\n\n  marker.setMap(null);\n  this.markers_.splice(index, 1); // Remove the marker from the list of managed markers\n  return true;\n};\n\n\n/**\n * Removes all clusters and markers from the map and also removes all markers\n *  managed by the clusterer.\n */\nMarkerClusterer.prototype.clearMarkers = function () {\n  this.resetViewport_(true);\n  this.markers_ = [];\n};\n\n\n/**\n * Recalculates and redraws all the marker clusters from scratch.\n *  Call this after changing any properties.\n */\nMarkerClusterer.prototype.repaint = function () {\n  var oldClusters = this.clusters_.slice();\n  this.clusters_ = [];\n  this.resetViewport_(false);\n  this.redraw_();\n\n  // Remove the old clusters.\n  // Do it in a timeout to prevent blinking effect.\n  setTimeout(function () {\n    var i;\n    for (i = 0; i < oldClusters.length; i++) {\n      oldClusters[i].remove();\n    }\n  }, 0);\n};\n\n\n/**\n * Returns the current bounds extended by the grid size.\n *\n * @param {google.maps.LatLngBounds} bounds The bounds to extend.\n * @return {google.maps.LatLngBounds} The extended bounds.\n * @ignore\n */\nMarkerClusterer.prototype.getExtendedBounds = function (bounds) {\n  var projection = this.getProjection();\n\n  // Turn the bounds into latlng.\n  var tr = new google.maps.LatLng(bounds.getNorthEast().lat(),\n      bounds.getNorthEast().lng());\n  var bl = new google.maps.LatLng(bounds.getSouthWest().lat(),\n      bounds.getSouthWest().lng());\n\n  // Convert the points to pixels and the extend out by the grid size.\n  var trPix = projection.fromLatLngToDivPixel(tr);\n  trPix.x += this.gridSize_;\n  trPix.y -= this.gridSize_;\n\n  var blPix = projection.fromLatLngToDivPixel(bl);\n  blPix.x -= this.gridSize_;\n  blPix.y += this.gridSize_;\n\n  // Convert the pixel points back to LatLng\n  var ne = projection.fromDivPixelToLatLng(trPix);\n  var sw = projection.fromDivPixelToLatLng(blPix);\n\n  // Extend the bounds to contain the new bounds.\n  bounds.extend(ne);\n  bounds.extend(sw);\n\n  return bounds;\n};\n\n\n/**\n * Redraws all the clusters.\n */\nMarkerClusterer.prototype.redraw_ = function () {\n  this.createClusters_(0);\n};\n\n\n/**\n * Removes all clusters from the map. The markers are also removed from the map\n *  if <code>opt_hide</code> is set to <code>true</code>.\n *\n * @param {boolean} [opt_hide] Set to <code>true</code> to also remove the markers\n *  from the map.\n */\nMarkerClusterer.prototype.resetViewport_ = function (opt_hide) {\n  var i, marker;\n  // Remove all the clusters\n  for (i = 0; i < this.clusters_.length; i++) {\n    this.clusters_[i].remove();\n  }\n  this.clusters_ = [];\n\n  // Reset the markers to not be added and to be removed from the map.\n  for (i = 0; i < this.markers_.length; i++) {\n    marker = this.markers_[i];\n    marker.isAdded = false;\n    if (opt_hide) {\n      marker.setMap(null);\n    }\n  }\n};\n\n\n/**\n * Calculates the distance between two latlng locations in km.\n *\n * @param {google.maps.LatLng} p1 The first lat lng point.\n * @param {google.maps.LatLng} p2 The second lat lng point.\n * @return {number} The distance between the two points in km.\n * @see http://www.movable-type.co.uk/scripts/latlong.html\n*/\nMarkerClusterer.prototype.distanceBetweenPoints_ = function (p1, p2) {\n  var R = 6371; // Radius of the Earth in km\n  var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;\n  var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) *\n    Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d;\n};\n\n\n/**\n * Determines if a marker is contained in a bounds.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @param {google.maps.LatLngBounds} bounds The bounds to check against.\n * @return {boolean} True if the marker is in the bounds.\n */\nMarkerClusterer.prototype.isMarkerInBounds_ = function (marker, bounds) {\n  return bounds.contains(marker.getPosition());\n};\n\n\n/**\n * Adds a marker to a cluster, or creates a new cluster.\n *\n * @param {google.maps.Marker} marker The marker to add.\n */\nMarkerClusterer.prototype.addToClosestCluster_ = function (marker) {\n  var i, d, cluster, center;\n  var distance = 40000; // Some large number\n  var clusterToAddTo = null;\n  for (i = 0; i < this.clusters_.length; i++) {\n    cluster = this.clusters_[i];\n    center = cluster.getCenter();\n    if (center) {\n      d = this.distanceBetweenPoints_(center, marker.getPosition());\n      if (d < distance) {\n        distance = d;\n        clusterToAddTo = cluster;\n      }\n    }\n  }\n\n  if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {\n    clusterToAddTo.addMarker(marker);\n  } else {\n    cluster = new Cluster(this);\n    cluster.addMarker(marker);\n    this.clusters_.push(cluster);\n  }\n};\n\n\n/**\n * Creates the clusters. This is done in batches to avoid timeout errors\n *  in some browsers when there is a huge number of markers.\n *\n * @param {number} iFirst The index of the first marker in the batch of\n *  markers to be added to clusters.\n */\nMarkerClusterer.prototype.createClusters_ = function (iFirst) {\n  var i, marker;\n  var mapBounds;\n  var cMarkerClusterer = this;\n  if (!this.ready_) {\n    return;\n  }\n\n  // Cancel previous batch processing if we're working on the first batch:\n  if (iFirst === 0) {\n    /**\n     * This event is fired when the <code>MarkerClusterer</code> begins\n     *  clustering markers.\n     * @name MarkerClusterer#clusteringbegin\n     * @param {MarkerClusterer} mc The MarkerClusterer whose markers are being clustered.\n     * @event\n     */\n    google.maps.event.trigger(this, \"clusteringbegin\", this);\n\n    if (typeof this.timerRefStatic !== \"undefined\") {\n      clearTimeout(this.timerRefStatic);\n      delete this.timerRefStatic;\n    }\n  }\n\n  // Get our current map view bounds.\n  // Create a new bounds object so we don't affect the map.\n  //\n  // See Comments 9 & 11 on Issue 3651 relating to this workaround for a Google Maps bug:\n  if (this.getMap().getZoom() > 3) {\n    mapBounds = new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(),\n      this.getMap().getBounds().getNorthEast());\n  } else {\n    mapBounds = new google.maps.LatLngBounds(new google.maps.LatLng(85.02070771743472, -178.48388434375), new google.maps.LatLng(-85.08136444384544, 178.00048865625));\n  }\n  var bounds = this.getExtendedBounds(mapBounds);\n\n  var iLast = Math.min(iFirst + this.batchSize_, this.markers_.length);\n\n  for (i = iFirst; i < iLast; i++) {\n    marker = this.markers_[i];\n    if (!marker.isAdded && this.isMarkerInBounds_(marker, bounds)) {\n      if (!this.ignoreHidden_ || (this.ignoreHidden_ && marker.getVisible())) {\n        this.addToClosestCluster_(marker);\n      }\n    }\n  }\n\n  if (iLast < this.markers_.length) {\n    this.timerRefStatic = setTimeout(function () {\n      cMarkerClusterer.createClusters_(iLast);\n    }, 0);\n  } else {\n    delete this.timerRefStatic;\n\n    /**\n     * This event is fired when the <code>MarkerClusterer</code> stops\n     *  clustering markers.\n     * @name MarkerClusterer#clusteringend\n     * @param {MarkerClusterer} mc The MarkerClusterer whose markers are being clustered.\n     * @event\n     */\n    google.maps.event.trigger(this, \"clusteringend\", this);\n  }\n};\n\n\n/**\n * Extends an object's prototype by another's.\n *\n * @param {Object} obj1 The object to be extended.\n * @param {Object} obj2 The object to extend with.\n * @return {Object} The new extended object.\n * @ignore\n */\nMarkerClusterer.prototype.extend = function (obj1, obj2) {\n  return (function (object) {\n    var property;\n    for (property in object.prototype) {\n      this.prototype[property] = object.prototype[property];\n    }\n    return this;\n  }).apply(obj1, [obj2]);\n};\n\n\n/**\n * The default function for determining the label text and style\n * for a cluster icon.\n *\n * @param {Array.<google.maps.Marker>} markers The array of markers represented by the cluster.\n * @param {number} numStyles The number of marker styles available.\n * @return {ClusterIconInfo} The information resource for the cluster.\n * @constant\n * @ignore\n */\nMarkerClusterer.CALCULATOR = function (markers, numStyles) {\n  var index = 0;\n  var title = \"\";\n  var count = markers.length.toString();\n\n  var dv = count;\n  while (dv !== 0) {\n    dv = parseInt(dv / 10, 10);\n    index++;\n  }\n\n  index = Math.min(index, numStyles);\n  return {\n    text: count,\n    index: index,\n    title: title\n  };\n};\n\n\n/**\n * The number of markers to process in one batch.\n *\n * @type {number}\n * @constant\n */\nMarkerClusterer.BATCH_SIZE = 2000;\n\n\n/**\n * The number of markers to process in one batch (IE only).\n *\n * @type {number}\n * @constant\n */\nMarkerClusterer.BATCH_SIZE_IE = 500;\n\n\n/**\n * The default root name for the marker cluster images.\n *\n * @type {string}\n * @constant\n */\nMarkerClusterer.IMAGE_PATH = \"https://raw.githubusercontent.com/googlemaps/v3-utility-library/master/markerclustererplus/images/m\";\n\n\n/**\n * The default extension name for the marker cluster images.\n *\n * @type {string}\n * @constant\n */\nMarkerClusterer.IMAGE_EXTENSION = \"png\";\n\n\n/**\n * The default array of sizes for the marker cluster images.\n *\n * @type {Array.<number>}\n * @constant\n */\nMarkerClusterer.IMAGE_SIZES = [53, 56, 66, 78, 90];\n\nmodule.exports = MarkerClusterer\n"],"sourceRoot":""}