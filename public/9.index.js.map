{"version":3,"sources":["webpack:///./app/components/common/svg/svg-edit.js"],"names":["_react","__webpack_require__","s","y","i","r","_reactRouterDom","_reactBootstrap","_svgPathParser","c","d","_reactRouter","f","e","__esModule","default","SvgEdit","Component","_this2","this","Request","get","config","getUrl","getRegion","props","match","params","problemId","withCredentials","end","err","res","setState","error","m","body","media","filter","x","id","mediaId","readOnlySvgs","svgId","points","svgs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","svg","value","parsePath","path","push","nr","hasAnchor","return","w","width","h","height","ctrl","activePoint","draggedPoint","draggedCubic","areaId","areaName","areaVisibility","sectorId","sectorName","sectorVisibility","name","grade","visibility","document","addEventListener","handleKeyDown","bind","handleKeyUp","removeEventListener","ctrlKey","key","anchor","window","history","back","event","_this3","preventDefault","post","state","send","delete","length","generatePath","pushUrl","dim","refs","getBoundingClientRect","dx","dy","Math","round","clientX","left","clientY","top","coords","getMouseCoords","forEach","p","q","a","rx","ry","rot","laf","sf","setPointCoords","setCubicCoords","active","index","v","splice","shapes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_react2","createElement","className","strokeWidth","strokeDasharray","commands","parseSVG","makeAbsolute","generateSvgNrAndAnchor","ixNr","ixAnchor","maxY","minY","len","cx","cy","fontSize","map","code","x1","y1","x2","y2","x0","y0","_this4","_reactFontawesome2","icon","spin","size","status","toString","Redirect","to","circles","anchors","onMouseDown","setDraggedCubic","setDraggedPoint","_reactMetaTags2","getTitle","Breadcrumb","Link","Well","bsSize","onMouseUp","cancelDragging","onMouseLeave","onSubmit","save","FormGroup","controlId","Alert","bsStyle","ButtonGroup","DropdownButton","title","MenuItem","eventKey","onSelect","setPointType","Button","onClick","removeActivePoint","disabled","setHasAnchor","reset","onCancel","type","viewBox","addPoint","onMouseMove","handleMouseMove","ref","xlinkHref","parseReadOnlySvgs"],"mappings":"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","file":"9.index.js","sourcesContent":["import React, {Component} from 'react';\r\nimport MetaTags from 'react-meta-tags';\r\nimport ReactDOM from 'react-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { Well, FormGroup, MenuItem, ButtonGroup, Button, DropdownButton, Alert, Breadcrumb } from 'react-bootstrap';\r\nimport {parseSVG, makeAbsolute} from 'svg-path-parser';\r\nimport config from '../../../utils/config.js';\r\nimport Request from 'superagent';\r\nimport { Redirect } from 'react-router';\r\nimport FontAwesomeIcon from '@fortawesome/react-fontawesome';\r\nimport { faSpinner, faLock, faUserSecret } from '@fortawesome/fontawesome-free-solid';\r\n\r\nexport default class SvgEdit extends Component {\r\n  componentDidMount() {\r\n    Request.get(config.getUrl(\"problems?regionId=\" + config.getRegion() + \"&id=\" + this.props.match.params.problemId)).withCredentials().end((err, res) => {\r\n      if (err) {\r\n        this.setState({error: err});\r\n      } else {\r\n        const m = res.body[0].media.filter(x => x.id==this.props.match.params.mediaId)[0];\r\n        const readOnlySvgs = [];\r\n        var svgId = 0;\r\n        var points = [];\r\n        if (m.svgs) {\r\n          for (let svg of m.svgs) {\r\n            if (svg.problemId===res.body[0].id) {\r\n              svgId = svg.id;\r\n              points = this.parsePath(svg.path);\r\n            }\r\n            else {\r\n              readOnlySvgs.push({ nr: svg.nr, hasAnchor: svg.hasAnchor, path: svg.path });\r\n            }\r\n          }\r\n        }\r\n        this.setState({\r\n          mediaId: m.id,\r\n          nr: res.body[0].nr,\r\n          w: m.width,\r\n          h: m.height,\r\n          ctrl: false,\r\n          svgId: svgId,\r\n          points: points,\r\n          readOnlySvgs: readOnlySvgs,\r\n          activePoint: 0,\r\n          draggedPoint: false,\r\n          draggedCubic: false,\r\n          hasAnchor: true,\r\n          areaId: res.body[0].areaId,\r\n          areaName: res.body[0].areaName,\r\n          areaVisibility: res.body[0].areaVisibility,\r\n          sectorId: res.body[0].sectorId,\r\n          sectorName: res.body[0].sectorName,\r\n          sectorVisibility: res.body[0].sectorVisibility,\r\n          id: res.body[0].id,\r\n          name: res.body[0].name,\r\n          grade: res.body[0].grade,\r\n          visibility: res.body[0].visibility\r\n        });\r\n      }\r\n    });\r\n    document.addEventListener(\"keydown\", this.handleKeyDown.bind(this));\r\n    document.addEventListener(\"keyup\", this.handleKeyUp.bind(this));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.handleKeyDown.bind(this));\r\n    document.removeEventListener(\"keyup\", this.handleKeyUp.bind(this));\r\n  }\r\n\r\n  handleKeyDown(e) {\r\n    if (e.ctrlKey) this.setState({ctrl: true});\r\n  };\r\n\r\n  handleKeyUp(e) {\r\n    if (!e.ctrlKey) this.setState({ctrl: false});\r\n  };\r\n\r\n  setHasAnchor(anchor) {\r\n    this.setState({hasAnchor: anchor});\r\n  }\r\n\r\n  onCancel() {\r\n    window.history.back();\r\n  }\r\n\r\n  save(event) {\r\n    event.preventDefault();\r\n    Request.post(config.getUrl(\"problems/svg?problemId=\" + this.state.id + \"&mediaId=\" + this.state.mediaId))\r\n    .withCredentials()\r\n    .send({delete: this.state.points.length<2, id: this.state.svgId, path: this.generatePath(), hasAnchor: this.state.hasAnchor})\r\n    .end((err, res) => {\r\n      if (err) {\r\n        this.setState({error: err});\r\n      } else {\r\n        this.setState({pushUrl: \"/problem/\" + this.state.id});\r\n      }\r\n    });\r\n  }\r\n\r\n  cancelDragging(e) {\r\n    this.setState({\r\n      draggedPoint: false,\r\n      draggedCubic: false\r\n    });\r\n  }\r\n\r\n  getMouseCoords(e) {\r\n    const dim = this.refs[\"buldreinfo-svg-edit-img\"].getBoundingClientRect();\r\n    const dx = this.state.w/dim.width;\r\n    const dy = this.state.h/dim.height;\r\n    const x = Math.round((e.clientX - dim.left) * dx);\r\n    const y = Math.round((e.clientY - dim.top) * dy);\r\n    return {x, y};\r\n  };\r\n\r\n  addPoint(e) {\r\n    if (this.state.ctrl) {\r\n      let coords = this.getMouseCoords(e);\r\n      let points = this.state.points;\r\n      points.push(coords);\r\n      this.setState({\r\n        points,\r\n        activePoint: points.length - 1\r\n      });\r\n    }\r\n  };\r\n\r\n  generatePath() {\r\n    var d = \"\";\r\n    this.state.points.forEach((p, i) => {\r\n      if (i === 0) { // first point\r\n        d += \"M \";\r\n      } else if (p.q) { // quadratic\r\n        d += `Q ${ p.q.x } ${ p.q.y } `;\r\n      } else if (p.c) { // cubic\r\n        d += `C ${ p.c[0].x } ${ p.c[0].y } ${ p.c[1].x } ${ p.c[1].y } `;\r\n      } else if (p.a) { // arc\r\n        d += `A ${ p.a.rx } ${ p.a.ry } ${ p.a.rot } ${ p.a.laf } ${ p.a.sf } `;\r\n      } else {\r\n        d += \"L \";\r\n      }\r\n      d += `${ p.x } ${ p.y } `;\r\n    })\r\n    return d;\r\n  }\r\n\r\n  handleMouseMove(e) {\r\n    e.preventDefault();\r\n    if (!this.state.ctrl) {\r\n      if (this.state.draggedPoint) {\r\n        this.setPointCoords(this.getMouseCoords(e));\r\n      } else if (this.state.draggedCubic !== false) {\r\n        this.setCubicCoords(this.getMouseCoords(e), this.state.draggedCubic);\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  setPointCoords(coords) {\r\n    const points = this.state.points;\r\n    const active = this.state.activePoint;\r\n    points[active].x = coords.x;\r\n    points[active].y = coords.y;\r\n    this.setState({points});\r\n  };\r\n\r\n  setCubicCoords(coords, anchor) {\r\n    const points = this.state.points;\r\n    const active = this.state.activePoint;\r\n    points[active].c[anchor].x = coords.x;\r\n    points[active].c[anchor].y = coords.y;\r\n    this.setState({ points });\r\n  };\r\n\r\n  setDraggedPoint(index) {\r\n    if (!this.state.ctrl) {\r\n      this.setState({activePoint: index, draggedPoint: true});\r\n    }\r\n  };\r\n\r\n  setDraggedCubic(index, anchor) {\r\n    if (!this.state.ctrl) {\r\n      this.setState({activePoint: index, draggedCubic: anchor});\r\n    }\r\n  };\r\n\r\n  setPointType(v) {\r\n    const points = this.state.points;\r\n    const active = this.state.activePoint;\r\n    if (active !== 0) { // not the first point\r\n      switch (v) {\r\n        case \"L\":\r\n          points[active] = {x: points[active].x, y: points[active].y};\r\n          break;\r\n        case \"C\":\r\n          points[active] = {\r\n            x: points[active].x,\r\n            y: points[active].y,\r\n            c: [\r\n                {\r\n                  x: (points[active].x + points[active - 1].x - 50) / 2,\r\n                  y: (points[active].y + points[active - 1].y) / 2\r\n                },\r\n                {\r\n                  x: (points[active].x + points[active - 1].x + 50) / 2,\r\n                  y: (points[active].y + points[active - 1].y) / 2\r\n                }\r\n            ]\r\n          };\r\n        break;\r\n      }\r\n      this.setState({points});\r\n    }\r\n  };\r\n\r\n  removeActivePoint(e) {\r\n    let points = this.state.points;\r\n    let active = this.state.activePoint;\r\n    if (points.length > 1 && active !== 0) {\r\n      points.splice(active, 1);\r\n      this.setState({points, activePoint: points.length-1});\r\n    }\r\n  };\r\n\r\n  reset(e) {\r\n    this.setState({\r\n      ctrl: false,\r\n      points: [],\r\n      activePoint: 0,\r\n      draggedPoint: false,\r\n      draggedCubic: false,\r\n      hasAnchor: false\r\n    });\r\n  };\r\n\r\n  parseReadOnlySvgs() {\r\n    const shapes = [];\r\n    for (let svg of this.state.readOnlySvgs) {\r\n      shapes.push(<path key={shapes.length} d={svg.path} className=\"buldreinfo-svg-opacity buldreinfo-svg-route\" strokeWidth={0.003*this.state.w} strokeDasharray={0.006*this.state.w}/>);\r\n      const commands = parseSVG(svg.path);\r\n      makeAbsolute(commands); // Note: mutates the commands in place!\r\n      shapes.push(this.generateSvgNrAndAnchor(commands, svg.nr, svg.hasAnchor));\r\n    }\r\n    return shapes;\r\n  }\r\n\r\n  generateSvgNrAndAnchor(path, nr, hasAnchor) {\r\n    var ixNr;\r\n    var maxY = 0;\r\n    var ixAnchor;\r\n    var minY = 99999999;\r\n    for (var i=0, len=path.length; i < len; i++) {\r\n      if (path[i].y > maxY) {\r\n        ixNr = i;\r\n        maxY = path[i].y;\r\n      }\r\n      if (path[i].y < minY) {\r\n        ixAnchor = i;\r\n        minY = path[i].y;\r\n      }\r\n    }\r\n    var x = path[ixNr].x;\r\n    var y = path[ixNr].y;\r\n    const r = 0.012*this.state.w;\r\n    if (x < r) x = r;\r\n    if (x > (this.state.w-r)) x = this.state.w-r;\r\n    if (y < r) y = r;\r\n    if (y > (this.state.h-r)) y = this.state.h-r;\r\n    var anchor = null;\r\n    if (hasAnchor === true) {\r\n      anchor = <circle className=\"buldreinfo-svg-ring\" cx={path[ixAnchor].x} cy={path[ixAnchor].y} r={0.006*this.state.w}/>\r\n    }\r\n    return (\r\n      <g className=\"buldreinfo-svg-opacity\">\r\n        <circle className=\"buldreinfo-svg-ring\" cx={x} cy={y} r={r}/>\r\n        <text className=\"buldreinfo-svg-routenr\" x={x} y={y} fontSize={0.02*this.state.w}>{nr}</text>\r\n        {anchor}\r\n      </g>\r\n    );\r\n  }\r\n\r\n  parsePath(d) {\r\n    if (d) {\r\n      const commands = parseSVG(d);\r\n      makeAbsolute(commands); // Note: mutates the commands in place!\r\n      return commands.map(c => {\r\n        switch (c.code) {\r\n          case \"L\": case \"M\": return { x: Math.round(c.x), y: Math.round(c.y) };\r\n          case \"C\": return { x: Math.round(c.x), y: Math.round(c.y), c: [{x: Math.round(c.x1), y: Math.round(c.y1)}, {x: Math.round(c.x2), y: Math.round(c.y2)}] };\r\n          case \"S\": return { x: Math.round(c.x), y: Math.round(c.y), c: [{x: Math.round(c.x0), y: Math.round(c.y0)}, {x: Math.round(c.x2), y: Math.round(c.y2)}] };\r\n        }\r\n      });\r\n    }\r\n    return [];\r\n  }\r\n\r\n  render() {\r\n    if (!this.state) {\r\n      return <center><FontAwesomeIcon icon=\"spinner\" spin size=\"3x\" /></center>;\r\n    }\r\n    else if (this.state.error) {\r\n      return <span><h3>{this.state.error.status}</h3>{this.state.error.toString()}</span>;\r\n    }\r\n    else if (this.state.pushUrl) {\r\n      return (<Redirect to={this.state.pushUrl} push />);\r\n    }\r\n\r\n    var circles = this.state.points.map((p, i, a) => {\r\n      var anchors = [];\r\n      if (p.c) {\r\n        anchors.push(\r\n          <g className=\"buldreinfo-svg-edit-opacity\">\r\n            <line className=\"buldreinfo-svg-pointer buldreinfo-svg-route\" x1={a[i-1].x} y1={a[i-1].y} x2={p.c[0].x} y2={p.c[0].y} strokeWidth={0.0026*this.state.w} strokeDasharray={0.003*this.state.w}/>\r\n            <line className=\"buldreinfo-svg-pointer buldreinfo-svg-route\" x1={p.x} y1={p.y} x2={p.c[1].x} y2={p.c[1].y} strokeWidth={0.0026*this.state.w} strokeDasharray={0.003*this.state.w}/>\r\n            <circle className=\"buldreinfo-svg-pointer buldreinfo-svg-ring\" cx={p.c[0].x} cy={p.c[0].y} r={0.003*this.state.w} onMouseDown={this.setDraggedCubic.bind(this, i, 0)}/>\r\n            <circle className=\"buldreinfo-svg-pointer buldreinfo-svg-ring\" cx={p.c[1].x} cy={p.c[1].y} r={0.003*this.state.w} onMouseDown={this.setDraggedCubic.bind(this, i, 1)}/>\r\n          </g>\r\n        );\r\n      }\r\n      return (\r\n        <g className={\"buldreinfo-svg-ring-group\" + (this.state.activePoint === i ? \"  is-active\" : \"\")}>\r\n          {anchors}\r\n          <circle className=\"buldreinfo-svg-pointer buldreinfo-svg-ring\" cx={p.x} cy={p.y} r={0.003*this.state.w} onMouseDown={this.setDraggedPoint.bind(this, i)}/>\r\n        </g>\r\n      );\r\n    });\r\n    const path = this.generatePath();\r\n    return (\r\n      <span>\r\n        <MetaTags>\r\n          <title>{config.getTitle(\"Problem edit (SVG)\")}</title>\r\n        </MetaTags>\r\n        <Breadcrumb>\r\n          <Link to={`/`}>Home</Link> / <Link to={`/browse`}>Browse</Link> / <Link to={`/area/${this.state.areaId}`}>{this.state.areaName}</Link> {this.state.areaVisibility===1 && <FontAwesomeIcon icon=\"lock\" />}{this.state.areaVisibility===2 && <FontAwesomeIcon icon=\"user-secret\" />} / <Link to={`/sector/${this.state.sectorId}`}>{this.state.sectorName}</Link> {this.state.sectorVisibility===1 && <FontAwesomeIcon icon=\"lock\" />}{this.state.sectorVisibility===2 && <FontAwesomeIcon icon=\"user-secret\" />} / <Link to={`/problem/${this.state.id}`}>{this.state.nr} {this.state.name} {this.state.grade}</Link> {this.state.visibility===1 && <FontAwesomeIcon icon=\"lock\" />}{this.state.visibility===2 && <FontAwesomeIcon icon=\"user-secret\" />}\r\n        </Breadcrumb>\r\n        <Well bsSize=\"small\" onMouseUp={this.cancelDragging.bind(this)} onMouseLeave={this.cancelDragging.bind(this)}>\r\n          <form onSubmit={this.save.bind(this)}>\r\n            <FormGroup controlId=\"formControlsInfo\">\r\n              <Alert bsStyle=\"info\">\r\n                <center>\r\n                  <strong>CTRL + CLICK</strong> to add a point | <strong>CLICK</strong> to select a point | <strong>CLICK AND DRAG</strong> to move a point<br/>\r\n                  <ButtonGroup>\r\n                    {this.state.activePoint !== 0 && (\r\n                      <DropdownButton title={!!this.state.points[this.state.activePoint].c? \"Selected point: Curve to\" : \"Selected point: Line to\"} id=\"bg-nested-dropdown\">\r\n                        <MenuItem eventKey=\"0\" onSelect={this.setPointType.bind(this, \"L\")}>Selected point: Line to</MenuItem>\r\n                        <MenuItem eventKey=\"1\" onSelect={this.setPointType.bind(this, \"C\")}>Selected point: Curve to</MenuItem>\r\n                      </DropdownButton>\r\n                    )}\r\n                    {this.state.activePoint !== 0 && (\r\n                      <Button onClick={this.removeActivePoint.bind(this)}>Remove this point</Button>\r\n                    )}\r\n                    <DropdownButton title={this.state.hasAnchor === true? \"Route has anchor\" : \"No anchor on route\"} disabled={this.state.points.length===0} id=\"bg-nested-dropdown\">\r\n                      <MenuItem eventKey=\"0\" onSelect={this.setHasAnchor.bind(this, false)}>No anchor on route</MenuItem>\r\n                      <MenuItem eventKey=\"1\" onSelect={this.setHasAnchor.bind(this, true)}>Route has anchor</MenuItem>\r\n                    </DropdownButton>\r\n                    <Button bsStyle=\"warning\" disabled={this.state.points.length===0} onClick={this.reset.bind(this)}>Reset path</Button>\r\n                    <Button bsStyle=\"danger\" onClick={this.onCancel.bind(this)}>Cancel</Button>\r\n                    <Button type=\"submit\" bsStyle=\"success\">{this.state.points.length>=2? 'Save' : 'Delete path'}</Button>\r\n                  </ButtonGroup>\r\n                </center>\r\n              </Alert>\r\n            </FormGroup>\r\n            <FormGroup controlId=\"formControlsImage\">\r\n              <svg viewBox={\"0 0 \" + this.state.w + \" \" + this.state.h} onClick={this.addPoint.bind(this)} onMouseMove={this.handleMouseMove.bind(this)}>\r\n                <image ref=\"buldreinfo-svg-edit-img\" xlinkHref={config.getUrl(`images?id=${this.state.mediaId}`)} width=\"100%\" height=\"100%\"/>\r\n                {this.parseReadOnlySvgs()}\r\n                <path className=\"buldreinfo-svg-route\" d={path} strokeWidth={0.002*this.state.w}/>\r\n                {circles}\r\n              </svg>\r\n            </FormGroup>\r\n            <FormGroup controlId=\"formControlsPath\">\r\n              {path}\r\n            </FormGroup>\r\n          </form>\r\n        </Well>\r\n      </span>\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":""}