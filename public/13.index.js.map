{"version":3,"sources":["webpack:///./app/components/recover.js"],"names":["_react","__webpack_require__","o","c","a","_reactRouter","l","_reactBootstrap","i","d","e","__esModule","default","Recover","props","this","_this","__proto__","Object","getPrototypeOf","call","document","title","_config2","getTitle","state","password","password2","setState","token","match","params","event","_this2","preventDefault","validatePassword","validatePassword2","message","_react2","createElement","Panel","bsStyle","_superagent2","get","getUrl","withCredentials","end","err","res","error","pushUrl","key","value","target","length","status","toString","Redirect","to","push","Well","onSubmit","recover","bind","FormGroup","controlId","validationState","ControlLabel","FormControl","type","placeholder","onChange","onPasswordChanged","Feedback","HelpBlock","onConfirmPasswordChanged","ButtonGroup","Button","_reactFontawesome2","icon","spin","size","t"],"mappings":"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","file":"13.index.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router';\r\nimport Request from 'superagent';\r\nimport { FormGroup, ControlLabel, FormControl, HelpBlock, ButtonGroup, Button, Panel, Well } from 'react-bootstrap';\r\nimport auth from '../utils/auth.js';\r\nimport config from '../utils/config.js';\r\nimport FontAwesomeIcon from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/fontawesome-free-solid';\r\n\r\nexport default class Recover extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    document.title=config.getTitle() + \" | Reset password\";\r\n    this.state = {\r\n      password: '',\r\n      password2: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({token: this.props.match.params.token});\r\n  }\r\n\r\n  recover(event) {\r\n    event.preventDefault();\r\n    if (this.validatePassword(null)==='error' || this.validatePassword2(null)==='error') {\r\n      this.setState({message: <Panel bsStyle='danger'>Invalid password.</Panel>});\r\n    } else {\r\n      Request.get(config.getUrl(\"users/password?token=\" + this.state.token + \"&password=\" + this.state.password)).withCredentials().end((err, res) => {\r\n        if (err) {\r\n          this.setState({error: err});\r\n        } else {\r\n          this.setState({error: null, pushUrl: \"/login\"});\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onPasswordChanged(e) {\r\n    this.setState({password: e.target.value});\r\n  }\r\n\r\n  onConfirmPasswordChanged(e) {\r\n    this.setState({password2: e.target.value});\r\n  }\r\n\r\n  validatePassword() {\r\n    if (this.state.password.length < 8) {\r\n      return 'error';\r\n    }\r\n    return 'success';\r\n  }\r\n\r\n  validatePassword2() {\r\n    if (this.state.password2.length < 8 || this.state.password!=this.state.password2) {\r\n      return 'error';\r\n    }\r\n    return 'success';\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.token) {\r\n      return <center><FontAwesomeIcon icon=\"spinner\" spin size=\"3x\" /></center>;\r\n    }\r\n    else if (this.state.error) {\r\n      return <span><h3>{this.state.error.status}</h3>{this.state.error.toString()}</span>;\r\n    }\r\n    else if (this.state.pushUrl) {\r\n      return (<Redirect to={this.state.pushUrl} push />);\r\n    }\r\n    return (\r\n      <Well>\r\n        <form onSubmit={this.recover.bind(this)}>\r\n          <FormGroup controlId=\"formControlsPassword\" validationState={this.validatePassword()}>\r\n            <ControlLabel>New password</ControlLabel>\r\n            <FormControl type=\"password\" placeholder=\"Enter new password\" onChange={this.onPasswordChanged.bind(this)} />\r\n            <FormControl.Feedback />\r\n            <HelpBlock>At least 8 characters.</HelpBlock>\r\n          </FormGroup>\r\n          <FormGroup controlId=\"formControlsPassword2\" validationState={this.validatePassword2()}>\r\n            <ControlLabel>Confirm new password</ControlLabel>\r\n            <FormControl type=\"password\" placeholder=\"Confirm new password\" onChange={this.onConfirmPasswordChanged.bind(this)} />\r\n            <FormControl.Feedback />\r\n            <HelpBlock>Must match password field.</HelpBlock>\r\n          </FormGroup>\r\n          <ButtonGroup>\r\n            <Button type=\"submit\" bsStyle=\"success\">Reset password</Button>\r\n          </ButtonGroup>\r\n        </form>\r\n      </Well>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}