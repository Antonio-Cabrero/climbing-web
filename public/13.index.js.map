{"version":3,"sources":["webpack:///./app/components/recover.js"],"names":["_react","__webpack_require__","o","c","n","_reactRouter","l","_reactBootstrap","i","d","e","__esModule","default","Recover","props","this","_this","__proto__","Object","getPrototypeOf","call","document","title","config","getTitle","state","password","password2","Component","setState","token","match","params","event","_this2","preventDefault","validatePassword","validatePassword2","message","_react2","createElement","Panel","bsStyle","Request","get","getUrl","withCredentials","end","err","res","error","pushUrl","key","value","target","length","status","toString","Redirect","to","push","Well","onSubmit","recover","bind","FormGroup","controlId","validationState","ControlLabel","FormControl","type","placeholder","onChange","onPasswordChanged","Feedback","HelpBlock","onConfirmPasswordChanged","ButtonGroup","Button","_reactFontawesome2","icon","spin","size","t"],"mappings":"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","file":"13.index.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Redirect } from 'react-router';\r\nimport Request from 'superagent';\r\nimport { FormGroup, ControlLabel, FormControl, HelpBlock, ButtonGroup, Button, Panel, Well } from 'react-bootstrap';\r\nimport auth from '../utils/auth.js';\r\nimport config from '../utils/config.js';\r\nimport FontAwesomeIcon from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/fontawesome-free-solid';\r\n\r\nexport default class Recover extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    document.title=config.getTitle(\"Reset password\");\r\n    this.state = {\r\n      password: '',\r\n      password2: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({token: this.props.match.params.token});\r\n  }\r\n\r\n  recover(event) {\r\n    event.preventDefault();\r\n    if (this.validatePassword(null)==='error' || this.validatePassword2(null)==='error') {\r\n      this.setState({message: <Panel bsStyle='danger'>Invalid password.</Panel>});\r\n    } else {\r\n      Request.get(config.getUrl(\"users/password?token=\" + this.state.token + \"&password=\" + this.state.password)).withCredentials().end((err, res) => {\r\n        if (err) {\r\n          this.setState({error: err});\r\n        } else {\r\n          this.setState({error: null, pushUrl: \"/login\"});\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onPasswordChanged(e) {\r\n    this.setState({password: e.target.value});\r\n  }\r\n\r\n  onConfirmPasswordChanged(e) {\r\n    this.setState({password2: e.target.value});\r\n  }\r\n\r\n  validatePassword() {\r\n    if (this.state.password.length < 8) {\r\n      return 'error';\r\n    }\r\n    return 'success';\r\n  }\r\n\r\n  validatePassword2() {\r\n    if (this.state.password2.length < 8 || this.state.password!=this.state.password2) {\r\n      return 'error';\r\n    }\r\n    return 'success';\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.token) {\r\n      return <center><FontAwesomeIcon icon=\"spinner\" spin size=\"3x\" /></center>;\r\n    }\r\n    else if (this.state.error) {\r\n      return <span><h3>{this.state.error.status}</h3>{this.state.error.toString()}</span>;\r\n    }\r\n    else if (this.state.pushUrl) {\r\n      return (<Redirect to={this.state.pushUrl} push />);\r\n    }\r\n    return (\r\n      <Well>\r\n        <form onSubmit={this.recover.bind(this)}>\r\n          <FormGroup controlId=\"formControlsPassword\" validationState={this.validatePassword()}>\r\n            <ControlLabel>New password</ControlLabel>\r\n            <FormControl type=\"password\" placeholder=\"Enter new password\" onChange={this.onPasswordChanged.bind(this)} />\r\n            <FormControl.Feedback />\r\n            <HelpBlock>At least 8 characters.</HelpBlock>\r\n          </FormGroup>\r\n          <FormGroup controlId=\"formControlsPassword2\" validationState={this.validatePassword2()}>\r\n            <ControlLabel>Confirm new password</ControlLabel>\r\n            <FormControl type=\"password\" placeholder=\"Confirm new password\" onChange={this.onConfirmPasswordChanged.bind(this)} />\r\n            <FormControl.Feedback />\r\n            <HelpBlock>Must match password field.</HelpBlock>\r\n          </FormGroup>\r\n          <ButtonGroup>\r\n            <Button type=\"submit\" bsStyle=\"success\">Reset password</Button>\r\n          </ButtonGroup>\r\n        </form>\r\n      </Well>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}